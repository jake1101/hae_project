<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="calendar">

<!--
	스케줄 관련 
 -->
 
<!-- 본인의 기본 그룹에 대한 정보를 가져옴 -->
<select id="getDefaultScheduleGroup" resultType="map">
	/* getDefaultScheduleGroup */
	SELECT
		GRP_ID
	FROM
		ESSCDGRP
	WHERE
		USR_ID = #{g.username}
		AND IS_DEFAULT = '1'
</select>

<!-- 본인의 기본 그룹에 대한 정보를 가져옴 -->
<select id="getDefaultScheduleGroupUsingId" resultType="map">
	/* getDefaultScheduleGroup */
	SELECT
		GRP_ID
	FROM
		ESSCDGRP
	WHERE
		USR_ID = #{p.userId}
		AND IS_DEFAULT = '1'
</select>
 
<!-- 현재 롤에 적합한 등록된 일정 정보를 가져옴 -->
<select id="getCalendarScheduleList" resultType="map">
	/* getCalendarScheduleList */
	SELECT
		SCHED_ID,
		SCHED_NM,
		START_DATE,
		END_DATE,
		SCHED_DESC,
		SCHED_LOC,
		GRP_ID,
		USR_ID,
		NOTICE_DATE,
		NOTICE,
		REPEAT,
		REPEAT_ROOT,
		REPEAT_START,
		REPEAT_END
	FROM ESSCHED
	WHERE
		STS <![CDATA[<>]]> 'D'
		AND
		<foreach collection="p.target_group" item="group_info" index="index" open="(" close=")" separator="OR">
			 GRP_ID = #{group_info.grp_id}
		</foreach>
		
		<if test="p.start_limit != null and p.end_limit != null">
		AND (
			(START_DATE <![CDATA[ >= ]]> #{p.start_limit} AND START_DATE <![CDATA[ <= ]]> #{p.end_limit})
			OR (END_DATE <![CDATA[ >= ]]> #{p.start_limit} AND END_DATE <![CDATA[ <= ]]> #{p.end_limit})
		)
		</if>
		
		<if test="p.noticestart != null and p.noticeend != null">
		AND ( NOTICE_DATE <![CDATA[ >= ]]> #{p.noticestart} AND NOTICE_DATE <![CDATA[ <= ]]> #{p.noticeend} )
		</if> 
</select>

<!--  -->
<select id="getCalendarScheduleListUsingParam" resultType="map">
	/* getCalendarScheduleListUsingParam */
	SELECT
		SCHED_ID,
		SCHED_NM,
		START_DATE,
		END_DATE,
		SCHED_DESC,
		SCHED_LOC,
		GRP_ID,
		USR_ID,
		NOTICE_DATE,
		NOTICE,
		REPEAT,
		REPEAT_ROOT,
		REPEAT_START,
		REPEAT_END
	FROM ESSCHED
	WHERE
		STS <![CDATA[<>]]> 'D'
		AND
		<foreach collection="p.target_group" item="group_info" index="index" open="(" close=")" separator="OR">
			 GRP_ID = #{group_info}
		</foreach>
		<if test="p.sched_nm != null and p.sched_nm != ''">
			AND UPPER(SCHED_NM) LIKE '%' || UPPER(#{p.sched_nm}) || '%' 
		</if>
		<if test="p.sched_desc != null and p.sched_desc != ''">
			AND UPPER(SCHED_DESC) LIKE '%' || UPPER(#{p.sched_desc}) || '%'	
		</if>
		<if test="p.sched_loc != null and p.sched_loc != ''">
			AND UPPER(SCHED_LOC) LIKE '%' || UPPER(#{p.sched_loc}) || '%'	
		</if>
</select>

<!-- 등록된 모든 사용자 조회 -->
<select id="findListUserInCalendar" resultType="java.util.Map">
	SELECT DISTINCT A.USR_ID                         	/* 사용자아이디 */
		, A.USR_NM                         		/* 사용자명 */
		, CASE WHEN D.DEPT_NM IS NULL THEN ''
		ELSE D.DEPT_NM
		END  AS DEPT_NM                  		/* 부서명 */
		FROM ESAUSER A                        	/* A : 사용자 정보 */
  INNER JOIN ESAAURP B
	      ON B.SYS_ID = A.SYS_ID
	     AND B.USR_ID = A.USR_ID
  INNER JOIN ESA_ROLE_SITE C
          ON C.SYS_ID = B.SYS_ID
         AND C.ROLE_CD = B.ROLE_CD
  LEFT OUTER JOIN ESAOGDP D             		/* C : 부서 */
		ON A.SYS_ID = D.SYS_ID
		AND A.DEPT_CD = D.DEPT_CD
		AND D.STS != 'D'
	WHERE A.SYS_ID = #{g.tenant}
		AND A.STS != 'D'
		AND (A.USR_ID != 'ADMIN' AND A.USR_ID != 'SUPER')
		AND C.SITE_ID IN ( SELECT T3.SITE_ID
                                 FROM ESAUSER T1
                           INNER JOIN ESAAURP T2
                                   ON T2.SYS_ID = T1.SYS_ID
                                  AND T2.USR_ID = T1.USR_ID
                           INNER JOIN ESA_ROLE_SITE T3
                                   ON T3.SYS_ID = T2.SYS_ID
                                  AND T3.ROLE_CD = T2.ROLE_CD
                      LEFT OUTER JOIN ESAOGDP T4
                                   ON T4.SYS_ID = T1.SYS_ID
                                  AND T4.DEPT_CD = T1.DEPT_CD
                                  AND T4.STS != 'D'
                                WHERE T1.USR_ID = #{g.username}
                             )
		<if test="p.usr_nm != null and p.usr_nm != ''">
			<bind name="usernamePattern" value="'%' + p.usr_nm + '%'" />
				AND UPPER(A.USR_NM) LIKE UPPER(#{usernamePattern})
		</if>
		<if test="p.usr_id != null and p.usr_id != ''">
			<bind name="userIdPattern" value="'%' + p.usr_id + '%'" />
			AND UPPER(A.USR_ID) LIKE UPPER(#{userIdPattern})
		</if>
		<if test="p.dept_nm != null and p.dept_nm != ''">
			AND D.DEPT_NM LIKE '%' || UPPER(#{p.dept_nm}) || '%'
		</if>
	ORDER BY A.USR_ID ASC
</select>

<!-- 부서 공유 -->
<select id="findListDeptInCalendar" resultType="map">
	/* calendar.findListDeptInCalendar: 부서 목록 */
	SELECT A.SYS_ID
		, A.ORG_TYP_CD
		, A.ORG_CD
		, A.DEPT_CD
		, A.DEPT_NM
		, A.DEPT_EN_NM
		, A.UP_DEPT_CD
		, A.USE_YN
		, A.REM
		, A.STS
		, A.REG_ID
		, A.REG_DT
		, A.MOD_ID
		, A.MOD_DT
		, 1 AS RECURSIVE_LEVEL
		, A.DEPT_CD AS TREE
	FROM ESAOGDP A
		INNER JOIN ESAOGMG B 
			ON A.SYS_ID = B.SYS_ID
			AND A.ORG_TYP_CD = B.ORG_TYP_CD
			AND A.ORG_CD = B.ORG_CD
			AND B.STS != 'D'
	WHERE A.SYS_ID = #{g.tenant}
		AND A.ORG_CD = #{p.org_cd}
		AND A.STS != 'D'
	<if test="p.dept_cd != null and p.dept_cd != ''">
		AND DEPT_CD LIKE '%' || UPPER(#{p.dept_cd}) || '%'
	</if>
	<if test="p.dept_nm != null and p.dept_nm != ''">
		<bind name="pattern" value="'%' + p.dept_nm + '%'" />
		AND UPPER(DEPT_NM) LIKE UPPER(#{pattern})
	</if>
</select>

<!-- 스케줄 정보를 저장함 -->
<insert id="saveSchedule">
	/* saveSchedule */
	INSERT INTO ESSCHED
	(
		SYS_ID,
		SCHED_ID,
		USR_ID,
		SCHED_NM,
		SCHED_DESC,
		SCHED_LOC,
		GRP_ID,
		START_DATE,
		END_DATE,
		NOTICE_DATE,
		REG_ID,
		REG_DT,
		MOD_ID,
		MOD_DT,
		STS,
		NOTICE,
		REPEAT,
		REPEAT_ROOT,
		REPEAT_START,
		REPEAT_END
	) 
	VALUES
	(
		#{g.tenant},
		#{p.sched_id},
		#{g.username},
		#{p.sched_nm},
		#{p.sched_desc},
		#{p.sched_loc},
		#{p.grp_id},
		#{p.start_date},
		#{p.end_date},
		#{p.notice_date},
		#{g.username},
        #{g.now},
        #{g.username},
        #{g.now},
        'C',
        #{p.notice},
        #{p.repeat},
        #{p.repeat_root},
        #{p.repeat_start},
        #{p.repeat_end}
	) 
</insert>

<!-- 일정 상세 정보를 리턴 -->
<select id="getScheduleDetail" resultType="map">
	/* getScheduleDetail */
	SELECT
		SCHED_ID,
		USR_ID,
		SCHED_NM,
		SCHED_DESC,
		SCHED_LOC,
		GRP_ID,
		START_DATE,
		END_DATE,
		NOTICE_DATE,
		NOTICE,
		REPEAT,
		REPEAT_ROOT,
		REPEAT_START,
		REPEAT_END
	FROM
		ESSCHED
	WHERE
		SCHED_ID = #{p.sched_id}
</select>

<!-- 그룹 상세 정보를 리턴 -->
<select id="getGroupDetail" resultType="map">
	/* getGroupDetail */
	SELECT
		GRP_ID,
		GRP_NM,
		GRP_DESC,
		GRP_COLOR,
		GRP_FONT_COLOR,
		GRP_BORDER_COLOR,
		USR_ID, 
		IS_DEFAULT
	FROM
		ESSCDGRP
	WHERE
		GRP_ID = #{p.grp_id}
</select>

<!-- 스케줄을 삭제한다. -->
<delete id="deleteSchedule">
	/* deleteSchedule */
	DELETE 
	FROM ESSCHED
	WHERE 
		SCHED_ID = #{p.sched_id}
		<if test="p.target != null">
			OR REPEAT_ROOT = #{p.target}
			OR SCHED_ID = #{p.target}
		</if>
</delete>

<!-- 스케줄을 업데이트 한다. -->
<update id="updateSchedule">
	/* updateSchedule */
	UPDATE ESSCHED SET
		STS = 'U'
		,MOD_ID = #{g.username}
		,MOD_DT = #{g.now}
		,NOTICE = #{p.notice}
		,NOTICE_DATE = #{p.notice_date}
		,REPEAT = #{p.repeat}
		,REPEAT_ROOT = #{p.repeat_root}
		,REPEAT_START = #{p.repeat_start}
		,REPEAT_END = #{p.repeat_end}
		,START_DATE = #{p.start_date}
		,SCHED_NM = #{p.sched_nm}
		,END_DATE = #{p.end_date}
		,SCHED_DESC = #{p.sched_desc}
		,SCHED_LOC = #{p.sched_loc}
		,GRP_ID = #{p.grp_id}
	WHERE SCHED_ID = #{p.sched_id}
</update>

<!-- 반복으로 연결된 항목들의 정보를 모두 수정한다. -->
<update id="updateConnectedSchedule">
	/* updateConnectedSchedule */
	UPDATE ESSCHED SET
		STS = 'U'
		,MOD_ID = #{g.username}
		,MOD_DT = #{g.now}
		,SCHED_NM = #{p.sched_nm}
		,END_DATE = #{p.end_date}
		,SCHED_DESC = #{p.sched_desc}
		,SCHED_LOC = #{p.sched_loc}
		,GRP_ID = #{p.grp_id}
	WHERE
		REPEAT_ROOT = #{p.repeat_root}
</update>

<!-- 반복으로 연결된 일정을 모두 삭제함. 단 가장 앞의 일정은 삭제하지 않는다. -->
<delete id="deleteConnectedScheulde">
	/* deleteConnectedScheulde */
	DELETE FROM ESSCHED 
	WHERE 
		REPEAT_ROOT = #{p.repeat_root}
		AND SCHED_ID <![CDATA[<>]]> #{p.repeat_root}
</delete>

<!--
	그룹 관련 
 -->
<!-- 그룹 정보를 가져옴 -->
<select id="getCalendarScheduleGroupList" resultType="map">
	/* getCalendarScheduleGroupList */
	SELECT 
		GRP_ID,
		GRP_NM,
		GRP_DESC,
		GRP_COLOR,
		GRP_FONT_COLOR,
		GRP_BORDER_COLOR,
		USR_ID,			/* 그룹 생성자 */ 
		IS_DEFAULT,
		REG_DT
	FROM ESSCDGRP
	WHERE 
		STS <![CDATA[<>]]> 'D'
		AND (
			USR_ID = #{g.username}	/* 본인 소유 그룹 */
			OR GRP_ID IN (SELECT GRP_ID FROM ESGRPUSR WHERE STS <![CDATA[<>]]> 'D' AND USR_ID = #{g.username}) /* 아이디 공유 */
			<if test='p.dept_cd != null'>
				OR GRP_ID IN (SELECT GRP_ID FROM ESGRPDEPT WHERE STS <![CDATA[<>]]> 'D' AND DEPT_CD = #{p.dept_cd}) /* 부서 공유 */
			</if>
			<if test='p.purc_grp_cd != null'>
				OR GRP_ID IN (SELECT GRP_ID FROM ESGRPJOB WHERE STS <![CDATA[<>]]> 'D' AND PURC_GRP_CD = #{p.purc_grp_cd}) /* 그룹 공유 */
			</if>
			<if test='p.vd_cd != null'>
				OR GRP_ID IN (SELECT GRP_ID FROM ESGRPVD WHERE STS <![CDATA[<>]]> 'D' AND VD_CD = #{p.vd_cd}) /* 협력사 공유 */
			</if>
		)
	ORDER BY REG_DT
</select>

<!-- 그룹 정보를 저장함 -->
<insert id="saveScheduleGroup">
	/* saveScheduleGroup */
	INSERT INTO ESSCDGRP
	(
		SYS_ID,
		GRP_ID,
		GRP_NM,
		GRP_DESC,
		GRP_COLOR,
		GRP_FONT_COLOR,
		GRP_BORDER_COLOR,
		USR_ID,
		REG_ID,
		REG_DT,
		MOD_ID,
		MOD_DT,
		STS
		<if test="p.is_default != null">
		, IS_DEFAULT
		</if>
	)
	
	VALUES
	(
		#{g.tenant},
		#{p.grp_id},
		#{p.grp_nm},
		#{p.grp_desc},
		#{p.grp_color},
		#{p.grp_font_color},
		#{p.grp_border_color},
		#{g.username},
		#{g.username},
        #{g.now},
        #{g.username},
        #{g.now},
        'C'
		<if test="p.is_default != null">
			<if test="p.is_default == true">
			, '1' 
			</if>
			<if test="p.is_default == false">
			, '0' 
			</if>
		</if>
	)
</insert>

<!-- 스케줄 그룹 업데이트 -->
<update id="updateScheduleGroup">
	UPDATE ESSCDGRP SET
		<if test="p.grp_nm != null">
			GRP_NM = #{p.grp_nm},
		</if>
		<if test="p.grp_desc != null">
			GRP_DESC = #{p.grp_desc},
		</if>
		<if test="p.grp_color != null">
			GRP_COLOR = #{p.grp_color},
		</if>
		<if test="p.grp_font_color != null">
			GRP_FONT_COLOR = #{p.grp_font_color},
		</if>
		<if test="p.grp_border_color != null">
			GRP_BORDER_COLOR = #{p.grp_border_color},
		</if>
		STS = 'U',
		MOD_ID = #{g.username},
		MOD_DT = #{g.now}
	WHERE GRP_ID = #{p.grp_id}
</update>

<!-- 일정 그룹 정보 삭제 -->
<delete id="deleteScheduleGroup">
	/* deleteScheduleGroup */
	DELETE
	FROM ESSCDGRP
	WHERE 
		GRP_ID = #{p.grp_id}
</delete>

<!-- 그룹 - 유저 매핑 정보 저장 -->
<insert id="saveCalendarGroupUserMappingInfo" parameterType="java.util.List">
	/* saveCalendarGroupUserMappingInfo */
	INSERT INTO ESGRPUSR
	(
		SYS_ID,
		GRP_ID,
		USR_ID,
		USR_NM,
		REG_ID,
		REG_DT,
		MOD_ID,
		MOD_DT,
		STS
	)
	
	VALUES (
		#{g.tenant},
		#{p.grp_id},
		#{p.usr_id},
		#{p.usr_nm},
		#{g.username},
		#{g.now},
		#{g.username},
		#{g.now},
		'C'
	)
</insert>

<!-- 그룹 협력사 매핑 정보 업데이트 -->
<update id="updateCalendarGroupVendorMappingInfo">
	UPDATE ESGRPVD SET
		VD_CD = #{p.vd_cd},
		VD_NM = #{p.vd_nm},
		STS = 'U',
		MOD_ID = #{g.username},
		MOD_DT = #{g.now}
	WHERE 
		GRP_ID = #{p.grp_id}
</update>

<!-- 그룹 유저 매핑 정보 업데이트 -->
<update id="updateCalendarGroupUserMappingInfo">
	UPDATE ESGRPUSR SET
		USR_ID = #{p.usr_id},
		USR_NM = #{p.usr_nm},
		STS = 'U',
		MOD_ID = #{g.username},
		MOD_DT = #{g.now}
	WHERE 
		GRP_ID = #{p.grp_id}
</update>

<!-- 그룹 부서 매핑 정보 업데이트 -->
<update id="updateCalendarGroupDeptMappingInfo">
	UPDATE ESGRPDEPT SET
		DEPT_CD = #{p.dept_cd},
		DEPT_NM = #{p.dept_nm},
		STS = 'U',
		MOD_ID = #{g.username},
		MOD_DT = #{g.now}
	WHERE 
		GRP_ID = #{p.grp_id}
</update>

<!-- 그룹 직무 매핑 정보 업데이트 -->
<update id="updateCalendarGroupJobMappingInfo">
	UPDATE ESGRPJOB SET
		PURC_GRP_CD = #{p.purc_grp_cd},
		PURC_GRP_NM = #{p.purc_grp_nm},
		STS = 'U',
		MOD_ID = #{g.username},
		MOD_DT = #{g.now}
	WHERE 
		GRP_ID = #{p.grp_id}
</update>

<!-- 그룹에 연관된 스케줄 삭제 -->
<delete id="delScheduleConnectedGroup">
	DELETE
	FROM ESSCHED
	WHERE 
		GRP_ID = #{p.grp_id} 
</delete>

<!-- 그룹과 유저가 매핑된 정보를 가져옴 -->
<select id="findGroupUserInfo" resultType="map">
	SELECT
		USR_ID,
		USR_NM
	FROM ESGRPUSR
	WHERE
		GRP_ID = #{p.grp_id}
</select>

<!-- 그룹과 협력사가 매핑된 정보를 가져옴 -->
<select id="findGroupVendorInfo" resultType="map">
	/* findGroupVendorInfo */
	SELECT
		VD_CD,
		VD_NM
	FROM ESGRPVD
	WHERE
		GRP_ID = #{p.grp_id}
</select>

<!-- 그룹과 부서가 매핑된 정보를 가져옴 -->
<select id="findGroupDeptInfo" resultType="map">
	/* findGroupJobInfo */
	SELECT
		DEPT_CD,
		DEPT_NM
	FROM ESGRPDEPT
	WHERE
		GRP_ID = #{p.grp_id}
</select>

<!-- 그룹과 직무가 매핑된 정보를 가져옴 -->
<select id="findGroupJobInfo" resultType="map">
	/* findGroupJobInfo */
	SELECT
		PURC_GRP_CD,
		PURC_GRP_NM
	FROM ESGRPJOB
	WHERE
		GRP_ID = #{p.grp_id}
</select>

<!-- 그룹 - 유저 매핑 정보 삭제 -->
<delete id="deleteCalendarGroupUserMappingInfo">
	/* deleteCalendarGroupUserMappingInfo */
	DELETE
	FROM ESGRPUSR
	WHERE
		GRP_ID = #{p.grp_id}
</delete>

<!-- 그룹 - 유저 매핑 정보 삭제  -->
<delete id="deleteCalendarGroupUserMappingInfoUsingUserId">
	/* deleteCalendarGroupUserMappingInfoUsingUserId */
	DELETE
	FROM ESGRPUSR
	WHERE
		USR_ID = #{p.userId}
</delete>

<!-- 그룹 - 업무 매핑 정보 저장 -->
<insert id="saveCalendarGroupJobMappingInfo">
	/* saveCalendarGroupJobMappingInfo */
	INSERT INTO ESGRPJOB
	(
		SYS_ID,
		GRP_ID,
		PURC_GRP_CD,
		PURC_GRP_NM,
		REG_ID,
		REG_DT,
		MOD_ID,
		MOD_DT,
		STS
	)
	
	VALUES
	(
		#{g.tenant},
		#{p.grp_id},
		#{p.purc_grp_cd},
		#{p.purc_grp_nm},
		#{g.username},
        #{g.now},
        #{g.username},
        #{g.now},
        'C'
	)
</insert>

<!-- 그룹 - 업무 매핑 정보 삭제 -->
<delete id="deleteCalendarGroupJobMappingInfo">
	/* deleteCalendarGroupJobMappingInfo */
	DELETE
	FROM ESGRPJOB
	WHERE
		GRP_ID = #{p.grp_id}
</delete>

<!-- 그룹 - 부서 매핑 정보 저장 -->
<insert id="saveCalendarGroupDeptMappingInfo">
	/* saveCalendarGroupDeptMappingInfo */
	INSERT INTO ESGRPDEPT
	(
		SYS_ID,
		GRP_ID,
		DEPT_CD,
		DEPT_NM,
		REG_ID,
		REG_DT,
		MOD_ID,
		MOD_DT,
		STS
	)
	
	VALUES
	(
		#{g.tenant},
		#{p.grp_id},
		#{p.dept_cd},
		#{p.dept_nm},
		#{g.username},
        #{g.now},
        #{g.username},
        #{g.now},
        'C'
	)
</insert>

<!-- 그룹 - 부서 매핑 정보 삭제 -->
<delete id="deleteCalendarGroupDeptMappingInfo">
	/* deleteCalendarGroupDeptMappingInfo */
	DELETE
	FROM ESGRPDEPT
	WHERE
		GRP_ID = #{p.grp_id}
</delete>

<!-- 그룹 - 업체 매핑 정보 저장 -->
<insert id="saveCalendarGroupVendarMappingInfo">
	/* saveCalendarGroupVendarMappingInfo */
	INSERT INTO ESGRPVD
	(
		SYS_ID,
		GRP_ID,
		VD_CD,
		VD_NM,
		REG_ID,
		REG_DT,
		MOD_ID,
		MOD_DT,
		STS
	)
	VALUES
	(
		#{g.tenant},
		#{p.grp_id},
		#{p.vd_cd},
		#{p.vd_nm},
		#{g.username},
        #{g.now},
        #{g.username},
        #{g.now},
        'C'
	)
</insert>

<!-- 그룹 - 업체 매핑 정보 삭제 -->
<delete id="deleteCalendarGroupVendorMappingInfo">
	/* deleteCalendarGroupVendorMappingInfo */
	DELETE
	FROM ESGRPVD
	WHERE
		GRP_ID = #{p.grp_id}
</delete>

<!-- 개인의 알람 설정 상태를 가져온다. -->
<insert id="saveNoticeState">
	/* saveNoticeState */
	INSERT INTO ESNOTICESTATE
	(
		SYS_ID,
		USR_ID,
		NOTICE_STATE,
		STS,
		REG_ID,
		REG_DT,
		MOD_ID,
		MOD_DT
	) 
	VALUES 
	(
		#{g.tenant},
		#{g.username},
		#{p.notice_state},
		'C',
		#{g.username},
        #{g.now},
        #{g.username},
        #{g.now}
	)
</insert>

<!-- 개인의 알람 설정을 수정한다. -->
<update id="updateNoticeState">
	/* updateNoticeState */
	UPDATE ESNOTICESTATE SET
		NOTICE_STATE = #{p.notice_state},
		STS = 'U',
		MOD_ID = #{g.username},
		MOD_DT = #{g.now}
	WHERE
		USR_ID = #{g.username}
</update>

<resultMap type="map" id="noticeState">
	<result property="notice_state" column="NOTICE_STATE" javaType="String" />
</resultMap>

<!-- 알람 정보를 가져옴 -->
<select id="getNoticeState" resultMap="noticeState">
	/* getNoticeState */
	SELECT 
		NOTICE_STATE
	FROM
		ESNOTICESTATE
	WHERE
		USR_ID = #{g.username}
</select>

<!--  알람 정보를 삭제함 -->
<delete id="removeNoticeState">
	/* removeNoticeState */
	DELETE
	FROM ESNOTICESTATE
	WHERE
		USR_ID = #{g.username}
</delete>

<!-- 아이디를 사용하여 알람 정보를 삭제함 -->
<delete id="removeNoticeStateUsingUserId">
	/* removeNoticeStateUsingUserId */
	DELETE
	FROM ESNOTICESTATE
	WHERE
		USR_ID = #{p.userId}
</delete>

</mapper>
