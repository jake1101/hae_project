<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="user">
	<select id="findListUser" parameterType="map" resultType="map">
	/* user.findListUser: 내부 사용자 목록 조회 */	
    SELECT
<!--            A.COMP_CD                        /* 조직코드 */ -->
<!--          , B.ORG_NM AS COMP_NM              /* 조직명 */ -->
         A.COMPANY_ID
         , A.SITE_ID
         , A.USR_ID                         /* 사용자아이디 */
         , A.USR_NM                         /* 사용자명 */
         , A.USE_YN                         /* 사용여부 */
         , A.DEPT_CD                        /* 부서코드 */
         , A.POS_CD                         /* 직위코드 */
         , A.JOB_CD
         , A.EMAIL
         , A.PHONE_NO
         , A.MOBILE_NO
         , B.NAME 			AS COMP_NM
         
<!--          , CASE WHEN C.DEPT_NM IS NULL THEN '' -->
<!--            ELSE C.DEPT_NM -->
<!--            END  AS DEPT_NM                  /* 부서명 */ -->
      FROM ESAUSER A                        /* A : 사용자 정보 */
<!--      INNER JOIN ESAOGMG B                   /* B : 조직 */ -->
<!--         ON A.SYS_ID = B.SYS_ID -->
<!--        AND A.COMP_CD = B.ORG_CD  -->
<!--        AND B.ORG_TYP_CD = 'COMPANY' -->
<!--        AND B.STS != 'D' -->
<!--       LEFT OUTER JOIN ESAOGDP C             /* C : 부서 */ -->
<!--         ON A.SYS_ID = C.SYS_ID -->
<!--        AND A.COMP_CD = C.ORG_CD -->
<!--        AND A.DEPT_CD = C.DEPT_CD -->
<!--        AND B.ORG_TYP_CD = C.ORG_TYP_CD -->
<!--        AND C.STS != 'D' -->
 LEFT JOIN COMPANY B
	 	ON A.COMPANY_ID = B.ID
     WHERE A.SYS_ID = #{g.tenant}
       AND A.STS != 'D'
       AND A.USR_CLS = 'B'
<!--        <if test='p.comp_cd != null and p.comp_cd != ""'> -->
<!--        AND A.COMP_CD = #{p.comp_cd} -->
<!--        </if>                         -->
	<if test="p.company_id != null">
		<choose>
			<when test='p.company_id == 0'>
			AND A.COMPANY_ID IS NULL
			</when>
			<otherwise>
			AND A.COMPANY_ID = #{p.company_id}
			</otherwise>
		</choose>
	</if>
       <if test="p.usr_nm != null and p.usr_nm != ''">
           <bind name="usernamePattern" value="'%' + p.usr_nm + '%'" />
       AND UPPER(A.USR_NM) LIKE UPPER(#{usernamePattern})
       </if>
       <if test="p.usr_id != null and p.usr_id != ''">
       	<bind name="userIdPattern" value="'%' + p.usr_id + '%'" />
       AND UPPER(A.USR_ID) LIKE UPPER(#{userIdPattern})
       </if>
       <if test="p.includeNotUse == null or p.includeNotUse == false">
       AND A.USE_YN = 'Y'
       </if>            
<!--        <if test="p.dept_cd != null and p.dept_cd != ''"> -->
<!--        AND C.DEPT_CD = #{p.dept_cd} -->
<!--        </if> -->
<!--        <if test="p.dept_nm != null and p.dept_nm != ''"> -->
<!--        <bind name="deptNmPattern" value="p.dept_nm + '%'" /> -->
<!--        AND C.DEPT_NM LIKE UPPER(#{deptNmPattern}) -->
<!--        </if> -->
     ORDER BY B.NAME
             ,A.USR_NM
    </select>
    
    <select id="findListUserByLevel" resultType="map">
    /* user.findListUserByLevel: 내부 사용자 목록 조회 */	
           -- 운영사 관리자
           SELECT DISTINCT A.COMPANY_ID
                 , A.SITE_ID
                 , A.USR_ID                         /* 사용자아이디 */
                 , A.USR_NM                         /* 사용자명 */
                 , A.USE_YN                         /* 사용여부 */
                 , A.DEPT_CD                        /* 부서코드 */
                 , A.POS_CD                         /* 직위코드 */
                 , A.JOB_CD
                 , A.EMAIL
                 , A.PHONE_NO
                 , A.MOBILE_NO
                 , B.NAME 			AS COMP_NM
           FROM (
			<if test='p.access_level == "company"'>
                  -- 운영사 관리자의 운영사로 계정 조회
                  SELECT *
                    FROM ESAUSER
                   WHERE COMPANY_ID = #{p.user_company_id}
               UNION ALL
            </if>
                  -- 로그인한 계정의 현장권한을 포함한 계정 조회
                  SELECT *
                    FROM ESAUSER
                   WHERE SITE_IDS <![CDATA[&&]]> ( SELECT SITE_IDS
                                         FROM ESAUSER
                                        WHERE USR_ID = #{g.username} ) -- Compare two arrays for containment.
                ) A
       LEFT JOIN COMPANY B
              ON A.COMPANY_ID = B.ID
           WHERE A.SYS_ID = #{g.tenant}
             AND A.STS != 'D'
             AND A.USR_CLS = 'B'
		<if test="p.company_id != null">
			<choose>
				<when test='p.company_id == 0'>
				AND A.COMPANY_ID IS NULL
				</when>
				<otherwise>
				AND A.COMPANY_ID = #{p.company_id}
				</otherwise>
			</choose>
		</if>
		<choose>
			<when test='p.access_level == "company"'>
			 AND A.ACCESS_LEVEL != 'system' -- 운영사 관리자(플랫폼관리자 제외)
			</when>
			<otherwise>
			 AND A.ACCESS_LEVEL NOT IN ('system', 'company') -- 현장 관리자(플랫폼,운영사관리자 제외)
			</otherwise>
		</choose>
		<if test="p.usr_nm != null and p.usr_nm != ''">
			<bind name="usernamePattern" value="'%' + p.usr_nm + '%'" />
			 AND UPPER(A.USR_NM) LIKE UPPER(#{usernamePattern})
		</if>
		<if test="p.usr_id != null and p.usr_id != ''">
			<bind name="userIdPattern" value="'%' + p.usr_id + '%'" />
			 AND UPPER(A.USR_ID) LIKE UPPER(#{userIdPattern})
		</if>
		<if test="p.includeNotUse == null or p.includeNotUse == false">
		     AND A.USE_YN = 'Y'
		</if>    
        ORDER BY COMP_NM
                ,USR_NM
    </select>

	<select id="getUserCount" resultType="int">
    /* user.saveUser: 내부 사용자 존재 여부 확인 */	
		SELECT
		COUNT(USR_ID)
		FROM ESAUSER
		WHERE
			SYS_ID = #{g.tenant}
			AND UPPER(USR_ID) = UPPER(#{p.usr_id})
	</select>

	<select id="findUserByUserId" resultType="map">
   	/* user.findUserByUserId: 내부 사용자 정보 조회 */	
		SELECT A.SYS_ID
		,      A.COMP_CD
		,      A.USR_ID
		,      A.USR_NM
		,      A.USR_EN_NM
		,      A.POS_CD
		,      A.DEPT_CD
<!-- 		,      C.DEPT_NM -->
		,      A.PHONE_NO
		,      A.MOBILE_NO
		,      A.FAX_NO
		,      A.EMAIL
		,      A.MAIL_RECEIVED_YN
		,      A.SMS_RECEIVED_YN
		,      A.USE_YN
		,	   A.TIMEZONE_CD
		,      A.COMPANY_ID
		,      A.SITE_ID
		,	   A.ACC_LOCK_YN AS LOCK_YN
		,      A.PROPERTY->'websocket'->>'use' AS WS_USE
		,      A.PROPERTY->'websocket'->'receiveHour'->>'from' AS WS_FROM_HR
		,      A.PROPERTY->'websocket'->'receiveHour'->> 'to' AS WS_TO_HR
		,      A.PROPERTY->'mail'->>'use' AS MAIL_USE
		,      A.PROPERTY->'mail'->'receiveHour'->>'from' AS MAIL_FROM_HR
		,      A.PROPERTY->'mail'->'receiveHour'->>'to' AS MAIL_TO_HR
		,      A.PROPERTY->'sms'->>'use' AS SMS_USE
		,      A.PROPERTY->'sms'->'receiveHour'->>'from' AS SMS_FROM_HR
		,      A.PROPERTY->'sms'->'receiveHour'->>'to'   AS SMS_TO_HR
		,A.ACCESS_LEVEL
		FROM ESAUSER A 
		
<!--      	INNER JOIN ESAOGMG B                   /* B : 조직 */ -->
<!--         ON ( -->
<!-- 	            B.SYS_ID = A.SYS_ID -->
<!-- 	        AND B.ORG_CD = A.COMP_CD  -->
<!-- 	        AND B.ORG_TYP_CD = 'COMPANY' -->
<!-- 	        AND B.STS != 'D' -->
<!--         ) -->
            
<!-- 		LEFT OUTER JOIN ESAOGDP C              /* C : 부서 */ -->
<!--         ON( -->
<!-- 	            A.SYS_ID = C.SYS_ID -->
<!-- 	        AND A.COMP_CD = C.ORG_CD -->
<!-- 	        AND A.DEPT_CD = C.DEPT_CD -->
<!-- 	        AND B.ORG_TYP_CD = C.ORG_TYP_CD -->
<!-- 	        AND C.STS != 'D' -->
<!--         )  -->
            
	    WHERE A.SYS_ID = #{g.tenant}
	      AND UPPER(A.USR_ID) = UPPER(#{p.usr_id})
	</select>

	<insert id="insertUser">
    /* user.saveUser: 내부 사용자 정보 신규 등록 */	
		INSERT INTO ESAUSER(				
			SYS_ID
			,USR_ID
			,PW
			,COMP_CD
			,USR_NM
			,USR_EN_NM
			,USR_CLS
			,JOB_ROLE
			,JOB_CD
			,POS_CD
			,EMP_NO
			,DEPT_CD
			,VD_CD
			,USE_YN
			,MOBILE_NO
			,PHONE_NO
			,FAX_NO
			,EMAIL
			,REM
			,MAIL_RECEIVED_YN
			,SMS_RECEIVED_YN
			,PW_INIT_YN
			,PW_MOD_REQUIRE_YN
			,PROPERTY
			,COMPANY_ID
			,SITE_ID
			,TIMEZONE_CD
			,STS
			,REG_ID
			,REG_DT
			,ACC_EXPIRE_YN
			,ACC_LOCK_YN
			,ACCESS_LEVEL
			,SITE_IDS
		) VALUES (
			#{g.tenant}
			,UPPER(#{p.usr_id})
			,#{p.pw}
			, 'C100'
			,#{p.usr_nm}
			,#{p.usr_en_nm}
			,#{p.usr_cls}
			,#{p.job_role}
			,#{p.job_cd}
			,#{p.pos_cd}
			,#{p.emp_no}
			,#{p.dept_cd}
			,#{p.vd_cd}
			,#{p.use_yn}
			,#{p.mobile_no}
			,#{p.phone_no}
			,#{p.fax_no}
			,#{p.email}
			,#{p.rem}
			,#{p.mail_received_yn}
			,#{p.sms_received_yn}
			,'N'
			,'Y'
			,#{p.property}::json
			,#{p.company_id}
			,#{p.site_id}
			,#{p.timezone_cd}
			,'C'
			,#{g.username}
			,#{g.now}
			,'N'
			,'N'
			,#{p.access_level}
			,translate(#{p.site_ids}, '[]', '{}')::bigint[]		
		)
	</insert>

	<update id="updateUser">
    /* user.saveUser: 내부 사용자 정보 수정 */	
		UPDATE ESAUSER
		SET
				USR_NM = #{p.usr_nm}
				<if test='p.pw != null'>
				,PW = #{p.pw}
				</if>
				,USR_EN_NM = #{p.usr_en_nm}
				<if test="p.dept_cd != null and p.dept_cd != ''">
				,DEPT_CD = #{p.dept_cd}
				</if>
				,USE_YN = #{p.use_yn}
				,ACC_LOCK_YN = #{p.lock_yn}
				,MOBILE_NO = #{p.mobile_no}
				,PHONE_NO = #{p.phone_no}
				,FAX_NO = #{p.fax_no}
				,EMAIL = #{p.email}
				,MAIL_RECEIVED_YN = #{p.mail_received_yn}
				,SMS_RECEIVED_YN = #{p.sms_received_yn}
				,PROPERTY = #{p.property}::json
				,TIMEZONE_CD = #{p.timezone_cd}
				,STS = 'U'
				,COMPANY_ID = #{p.company_id}
				,SITE_ID = #{p.site_id}
				,ACCESS_LEVEL = #{p.access_level}
				,MOD_ID = #{g.username}
				,MOD_DT = #{g.now}
				,LAST_LOGIN_DT = #{g.now}
		WHERE SYS_ID = #{g.tenant}
		  AND USR_ID = #{p.usr_id}
	</update>
	<update id="initPwTerm">
    /* user.initPw: 비밀번호 주기를 오늘날짜로 초기화 */	
		UPDATE ESAUSER
		SET
				PW_MOD_REQUIRE_YN = 'N',
				PW_MOD_DT = #{g.now}
		WHERE SYS_ID = #{g.tenant}
		  AND USR_ID = #{p.usr_id}
	</update>
	
	<update id="updatePw">
    /* user.updatePw: 사용자 사용자 비밀번호 업데이트  */	
		UPDATE ESAUSER
		SET
			PW = #{p.password}
			,PW_INIT_YN = 'N'
			,PW_MISS_CNT = 0
			,PW_MOD_REQUIRE_YN = 'N'
			,PW_MOD_DT = #{g.now}
			,MOD_ID = #{g.username}
			,MOD_DT = #{g.now}
		WHERE SYS_ID = #{g.tenant}
		  AND USR_ID = #{g.username}
	</update>
	
	<update id="initPw">
    /* user.initPw: 내부 사용자 사용자 비밀번호 초기화  */	
		UPDATE ESAUSER
		SET
			PW = #{p.password}
			,PW_INIT_YN = 'Y'
			,PW_MISS_CNT = 0
			,ACC_LOCK_YN = 'N'
			,PW_MOD_REQUIRE_YN = 'Y'
			,PW_MOD_DT = #{g.now}
			,MOD_ID = #{g.username}
			,MOD_DT = #{g.now}
		WHERE SYS_ID = #{g.tenant}
		  AND USR_ID = #{p.usr_id}
	</update>

    <update id="deleteUser">
    /* user.deleteListUser: 내부 사용자 정보 수정 */
	    DELETE 
	      FROM ESAUSER
	     WHERE SYS_ID  = #{g.tenant}
<!-- 	       AND COMP_CD = #{p.comp_cd} -->
	       AND USR_ID  = #{p.usr_id}   
    </update>
    
	<select id="findListUserRole" resultType="map">
	/* user.findListUserRole 사용자 별 권한 확인 */
		    SELECT 
	             RP.USR_ID
	            ,U.USR_NM
	            ,U.COMP_CD
	            ,CASE WHEN RP.ROLE_CD IS NOT NULL THEN 'Y' ELSE 'N' END AS GRANTED
	            ,RH.ROLE_CD
	            ,RH.ROLE_NM
	          FROM ESAAURH RH
   LEFT OUTER JOIN ESAAURP RP
                ON RH.ROLE_CD = RP.ROLE_CD 
               AND RH.SYS_ID = RP.SYS_ID 
               AND UPPER (RP.USR_ID) = #{p.usr_id}
   LEFT OUTER JOIN ESAUSER U
                ON U.USR_ID = RP.USR_ID 
               AND UPPER (U.USR_ID) = #{p.usr_id}
               AND U.SYS_ID = RH.SYS_ID
             WHERE RH.SYS_ID = #{g.tenant}
             <if test='p.menu_cd.equals("USR0001")'>
             	AND RH.API_FLAG = 'N'
             </if>
              ORDER BY RH.ROLE_CD
	</select>

	<insert id="insertUserRole">
	/* user.saveUserRole 사용자 별 권한 저장(신규추가) */	
		INSERT INTO ESAAURP (
			  SYS_ID
			, COMP_CD
			, USR_ID
			, ROLE_CD
			, REM
			, STS
			, REG_ID
			, REG_DT
		)
		VALUES (
			  #{g.tenant}
			, 'C100'
			, UPPER(#{p.usr_id})
			, #{p.role_cd}
			, #{p.rem}
			, 'C'
			, #{g.username}
			, #{g.now}
		)
	</insert>
	
	<delete id="deleteUserRole">
	/* user.saveUserRole 사용자 별 권한 저장(삭제) */	
		DELETE FROM ESAAURP 
		WHERE SYS_ID = #{g.tenant}
<!-- 			AND COMP_CD = #{p.comp_cd} -->
			AND USR_ID = #{p.usr_id}
			AND ROLE_CD = #{p.role_cd}
	</delete>	
	
	<delete id="deleteUserRoleByUserId">
	/* user.deleteUserRoleByUserId 사용자 권한 삭제 */	
		DELETE 
		  FROM ESAAURP 
		 WHERE SYS_ID  = #{g.tenant}
<!-- 		   AND COMP_CD = #{p.comp_cd} -->
		   AND USR_ID  = #{p.usr_id}
	</delete>
	
	<select id="findListUserOperorg" resultType="map">
	/* user.findListUserOperorg 사용자 별 운영조직 조회 */	
		SELECT
			A.USR_ID
			,A.OPER_ORG_CD
			,B.OPER_UNIT_CD
			,D.OPER_UNIT_NM
			,B.ORG_TYP_CD
			,B.ORG_CD
			,C.ORG_NM
			,C.ORG_EN_NM
			,C.COMP_CD
		FROM ESAOOPM A, ESAOOMG B, ESAOGMG C, ESAOGOP D
		WHERE A.SYS_ID = #{g.tenant}
		AND A.USR_ID = #{p.usr_id}
		AND A.SYS_ID = B.SYS_ID
		AND A.OPER_ORG_CD = B.OPER_ORG_CD
		AND B.SYS_ID = C.SYS_ID
		AND B.ORG_CD = C.ORG_CD
		AND B.SYS_ID = D.SYS_ID
		AND B.OPER_UNIT_CD = D.OPER_UNIT_CD
	</select>
	
	<select id="findUserByUserInfo" resultType="map">
	   		/* user.findUserByUserInfo: 내부 사용자 정보 조회 */	
			SELECT
				A.COMP_CD
				,A.USR_ID
				,A.USR_NM
				,A.USR_EN_NM
				,A.POS_CD
				,A.DEPT_CD
				,A.PHONE_NO
				,A.MOBILE_NO
				,A.FAX_NO
				,A.EMAIL
				,A.MAIL_RECEIVED_YN
				,A.SMS_RECEIVED_YN
				,A.USE_YN
				,A.TIMEZONE_CD
			FROM ESAUSER A 
		   WHERE
				A.SYS_ID = #{g.tenant}
				AND EMAIL = #{p.email}
				AND USR_ID = #{p.username}
	</select>
	
	<select id="findListUserByUserInfo" resultType="map">
	   		/* user.findListUserByUserInfo: 내부 사용자 정보 조회 */	
			SELECT
				A.COMP_CD
				,A.USR_ID
				,A.USR_NM
				,A.USR_EN_NM
				,A.POS_CD
				,A.DEPT_CD
				,A.PHONE_NO
				,A.MOBILE_NO
				,A.FAX_NO
				,A.EMAIL
				,A.MAIL_RECEIVED_YN
				,A.SMS_RECEIVED_YN
				,A.USE_YN
				,A.TIMEZONE_CD
			FROM ESAUSER A 
		   WHERE
				A.SYS_ID = #{g.tenant}
				AND EMAIL = #{p.email}
				AND USR_NM = #{p.username}
	</select>

	<select id="findUserByEmail" resultType="map">
	   		/* user.findUserByEmail: 내부 사용자 정보 조회 */	
			SELECT
				A.COMP_CD
				,A.USR_ID
				,A.USR_NM
				,A.USR_EN_NM
				,A.POS_CD
				,A.DEPT_CD
				,A.PHONE_NO
				,A.MOBILE_NO
				,A.FAX_NO
				,A.EMAIL
				,A.MAIL_RECEIVED_YN
				,A.SMS_RECEIVED_YN
				,A.USE_YN
				,A.TIMEZONE_CD
			FROM ESAUSER A 
		   WHERE
				A.SYS_ID = #{g.tenant}
				AND EMAIL = #{p.email}
	</select>	
	
	<select id="findListUserSiteRole" resultType="map">
	/* user.findListUserSiteRole */
	       SELECT c.NAME    AS COMPANY_NM
	             ,a.NAME    AS SITE_NM
	             ,CASE WHEN A.ID = ANY(B.SITE_IDS) THEN 'Y' 
	                   ELSE 'N' 
	               END AS GRANTED
	             ,a.ADDRESS
	             ,a.DESCRIPTION
	             ,a.ID AS SITE_ID
	         FROM SITE a
  LEFT OUTER JOIN ESAUSER b
               ON b.USR_ID = #{p.usr_id}
       INNER JOIN COMPANY C
               ON C.ID = a.COMPANY_ID
            WHERE a.USE_FLAG = 'Y'
         ORDER BY c.NAME
                 ,a.NAME
	</select>
	
	<select id="findListUserSiteRoleByLevel" resultType="map">
	/* user.findListUserSiteRoleByLevel */
	       SELECT c.NAME    AS COMPANY_NM
	             ,a.NAME    AS SITE_NM
	             ,CASE WHEN A.ID = ANY(B.SITE_IDS) THEN 'Y' 
	                   ELSE 'N' 
	               END AS GRANTED
	             ,a.ADDRESS
	             ,a.DESCRIPTION
	             ,a.ID AS SITE_ID
	         FROM (
				<if test='p.access_level == "company"'>
	         		-- 운영사 관리자의 운영사로 현장 조회
	         		SELECT NAME
	         		      ,ADDRESS
	         		      ,DESCRIPTION
	         		      ,ID
	         		      ,COMPANY_ID
	         		      ,USE_FLAG
	         		  FROM SITE
	         		 WHERE COMPANY_ID = #{p.company_id}
	         		 UNION
				</if>
	         		-- 운영사 관리자의 현장권한을 포함한 계정 조회
	         		SELECT NAME
	         		      ,ADDRESS
	         		      ,DESCRIPTION
	         		      ,ID
	         		      ,COMPANY_ID
	         		      ,USE_FLAG
	         		  FROM SITE
	         		 WHERE ID IN ( SELECT unnest(site_ids) AS SITE_ID
	         		                 FROM ESAUSER
	         		                WHERE USR_ID = #{g.username} )
	              ) a
  LEFT OUTER JOIN ESAUSER b
               ON b.USR_ID = #{p.usr_id}
       INNER JOIN COMPANY C
               ON C.ID = a.COMPANY_ID
            WHERE a.USE_FLAG = 'Y'
         ORDER BY c.NAME
                 ,a.NAME
	</select>
	
	<update id="saveUserSiteRole">
	/* user.saveUserSiteRole */
           UPDATE ESAUSER
              SET SITE_IDS = translate(#{p.site_ids}, '[]', '{}')::bigint[]
            WHERE USR_ID = #{p.usr_id}
	</update>
	<update id="saveDefUserSiteRole">
	/* user.saveDefUserSiteRole */
           UPDATE ESAUSER
              SET SITE_IDS = v4.FN_GET_ALL_SITE_IDS_BY_ID(#{p.usr_id}, 'Y')
            WHERE USR_ID = #{p.usr_id}
	</update>
	
	<select id="ptwApprList" resultType="map">
	       SELECT ID
	             ,PTW_ID
	             ,USER_ID
	         FROM PTW_APPR
	        WHERE USER_ID = #{p.usr_id}
	</select>
</mapper>