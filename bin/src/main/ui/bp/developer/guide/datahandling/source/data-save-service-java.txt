package smartsuite.app.bp.sample;

import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.apache.ibatis.session.SqlSession;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import smartsuite.app.common.shared.SharedService;

@Service
@Transactional
public class DeveloperGuideService {

	@Inject
	SharedService sharedService;
	
	@Inject
	private SqlSession sqlSession;
	
	private final String namespace = "sample.";
	
	/**
	 * 구매요청 정보 조회
	 */
	public Map<String, Object> findPr(Map<String, Object> param) {
		return sqlSession.selectOne(namespace + "findPr", param);
	}
	
	/**
	 * 구매요청 품목 목록 조회
	 */
	public List<Map<String, Object>> findListPrItem(Map<String, Object> param) {
		return sqlSession.selectList(namespace + "findListPrItem", param);
	}
	
	/**
	 * 구매요청 저장
	 */
	public Map<String, Object> saveTest(Map<String, Object> param) {
		Map<String, Object> prData = (Map<String, Object>)param.get("prData");
		
		// id가 존재하지 않는 경우
		if(prData.get("pr_id") == null || Strings.isNullOrEmpty(prData.get("pr_id").toString())){
			// 신규 id 생성
			prData.put("pr_id", UUID.randomUUID().toString());
			
			// 신규 no 채번
			String prNo = sharedService.generateDocNo("PR");
			prData.put("pr_no", prNo);
			
			// 신규인 경우 1차
			prData.put("pr_rev", 1);
			
			// 구매요청 정보 insert
			sqlSession.insert(namespace + "insertPr", prData);
		} else {
			// 구매요청 정보 update
			sqlSession.update(namespace + "updatePr", prData);
		}
		
		// 신규 구매요청 품목 리스트
		List<Map<String, Object>> insertPrItems = (List<Map<String, Object>>)saveParam.get("insertPrItems");
		if(insertPrItems != null) {
			for(Map<String, Object> prItem : insertPrItems) {
				prItem.put("pr_item_id", UUID.randomUUID().toString());
				prItem.put("pr_id"     , prData.get("pr_id"));
				prItem.put("pr_no"     , prData.get("pr_no"));
				prItem.put("pr_rev"    , prData.get("pr_rev"));
				
				// 구매요청 품목 insert
				sqlSession.insert(namespace + "insertPrItem", prItem);
			}
		}
		
		// 수정 구매요청 품목 리스트
		List<Map<String, Object>> updatePrItems = (List<Map<String, Object>>)saveParam.get("updatePrItems");
		if(updatePrItems != null) {
			for(Map<String, Object> prItem : updatePrItems) {
				// 구매요청 품목 update
				sqlSession.update(namespace + "updatePrItem", prItem);
			}
		}
		
		// 삭제 구매요청 품목 리스트
		List<Map<String, Object>> deletePrItems = (List<Map<String, Object>>)saveParam.get("deletePrItems");
		if(deletePrItems != null) {
			for(Map<String, Object> prItem : deletePrItems) {
				// 구매요청 품목 delete
				sqlSession.delete(namespace+ "deletePrItem", prItem);
			}
		}
		
		// result_data 셋팅 (화면 재 조회를 위한 id를 리턴해준다.)
		Map<String, Object> resultDataMap = new HashMap<String, Object>();
		resultDataMap.put("pr_id", prData.get("pr_id"));
		
		// 결과 리턴
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put(Const.RESULT_STATUS, Const.SUCCESS);
		resultMap.put(Const.RESULT_DATA  , resultDataMap); 
		return resultMap;
	}
}
