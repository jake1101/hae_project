<dom-module id="es-data-save">
	<style>
        :host {
            @apply(--vbox-layout);
        }
    </style>
	<template>
		<!-- 데이터 조회 -->
		<sc-ajax id="findTest" url="findTest.do" body="{{searchParam}}"></sc-ajax>
	    
		<!-- 데이터 저장 -->
		<sc-ajax id="saveTest" url="saveTest.do" on-response="completeSaveTest"></sc-ajax>
	    
		<cc-page-title-bar page-title="구매요청정보 저장화면(샘플)">
			<sc-button text="데이터 저장"	on-click="onSave"></sc-button>
		</cc-page-title-bar>
		
		<div class="flex page">
			<sc-panel title-text="기본정보" collapsible="true">
				<table class="tb-form">
					<colgroup>
		        		<col style="width:120px"/>
		        		<col/>
		        	</colgroup>
		        	<tr>
						<th>
							<sc-label text="구매운영조직"></sc-label>
						</th>
						<td>
							<sc-text-field class="w-150" value="{{prData.oper_org_nm}}" readonly></sc-text-field>
						</td>
					</tr>
					<tr>
						<th>
							<sc-label text="구매요청번호"></sc-label>
						</th>
						<td>
							<div class="field-box" style="width:100%">
								<sc-text-field class="w-150" value="{{prData.pr_no}}" readonly></sc-text-field>
								<span style="margin:0 5px">&#47;</span>
								<sc-text-field class="w-50 align-right" value="{{prData.pr_rev}}" readonly></sc-text-field>
								<span style="margin-left:5px">[[translate('차')]]</span>
							</div>
						</td>
					</tr>
					<tr>
						<th>
							<sc-label text="구매요청명"></sc-label>
						</th>
						<td>
							<sc-text-field value="{{prData.pr_tit}}" max-length="200"></sc-text-field>
						</td>
					</tr>
		        </table>
			</sc-panel>
			<sc-grid id="gridPanel" class="h-300" collapsible="true" aggregate="true" use-dummy="false" editable="true">
				<cc-grid-toolbar title-text="품목정보">
					<sc-button text="품목추가" on-click="onAddItem"></sc-button>
					<sc-button text="품목삭제" on-click="onDeleteItem"></sc-button>
				</cc-grid-toolbar>
				<sc-grid-columns>
					<sc-data-column	data-field="pr_lno"		header-text="항번"		width="50"	text-align="center"	data-type="number"	editable="false"></sc-data-column>
					<sc-data-column	data-field="item_cd"	header-text="품목코드"	width="100"	text-align="center"	editable="true"></sc-data-column>
					<sc-data-column	data-field="item_nm"	header-text="품목명"	width="250"	text-align="left"	editable="true"></sc-data-column>
					<sc-data-column	data-field="item_qty"	header-text="수량"		width="80"	text-align="right"	data-type="number"	format-type="qty"	editable="true"></sc-data-column>
				</sc-grid-columns>
				<sc-grid-fields>
					<sc-grid-field	data-field="pr_id"		data-type="text"></sc-grid-field>
					<sc-grid-field	data-field="pr_no"		data-type="text"></sc-grid-field>
					<sc-grid-field	data-field="pr_item_id"	data-type="text"></sc-grid-field>
				</sc-grid-fields>
			</sc-grid>
		</div>
	</template>
	<script>
	Polymer({
		is: 'es-data-save',
		properties : {
			// property의 기본값은 properties 객체의 value 필드를 사용하여 설정하며, value에는 값 또는 함수를 지정
			// value에 함수를 지정하였을 경우 해당 함수의 return 값이 property의 값
			// property의 type이 Object 또는 Array인 경우 value에 함수를 지정하여 객체의 초기화를 권장
			searchParam : {
				type : Object,
				value : function() {
					return {}
				}
			},
			prData : {
				type : Object,
				value : function() {
					return {}
				}
			}
		},
		// 데이터 조회
		onFind : function() {
			var me = this;
			
			// findTest 요청
			UT.request(me.$.findTest, function(el, res) {
				var result = res.response;
				
				// 기본정보 binding object 셋팅
				me.set("prData", result.prData);
				
				// 그리드 dataProvider 셋팅
				me.$.gridPanel.setDataProvider(result.prItemList);
			});
		},
		// 품목추가 버튼 클릭
		onAddItem : function() {
			var me = this;
			var provider = me.$.gridPanel.getDataProvider();
			
			// 마지막 행 뒤에 새로운 행을 추가한다.
			provider.addItem({"pr_lno" : me.getMaxLno(), "item_qty" : 1});
		},
		// 항번 구하기
		getMaxLno : function() {
			var me = this;
			var provider = me.$.gridPanel.getDataProvider();
			
			var maxLno = 10;
			if(provider.getItemSize() > 0) {
				// 모든 데이터를 가져온다.
				var allItems = provider.getItems();
				
				maxRow = allItems.reduce(function(a,b) {
					if(!a.pr_lno) a.pr_lno = 0;
					if(!b.pr_lno) b.pr_lno = 0;
					return (parseInt(a.pr_lno,10)> parseInt(b.pr_lno,10)) ? a : b ;
				});
				maxLno = parseInt(maxRow.pr_lno,10) + 10;
			}
			return maxLno;
		},
		// 품목삭제 버튼 클릭
		onDeleteItem : function() {
			var me = this;
			var provider = me.$.gridPanel.getDataProvider();
			
			// selection에 체크된 데이터들을 가져온다.
			var checked = provider.selectionCheckedItems();
			
			if(checked.length === 0) {
				UT.alert("STD.N1600"); // 선택된 항목이 없습니다
			} else {
				UT.confirm("STD.N1300", function() {	// "삭제 하시겠습니까?"
					provider.removeItems(true);	// 그리드에서 체크된 데이터를 지워준다. getRemoveItems에서 지워진 데이터를 가져올 수 있다.
				});
	        }
		},
		// 저장 버튼 클릭
		onSave : function() {
			var me = this;
			
			// 저장 하시겠습니까?
			UT.confirm("STD.N1200", function() {
				// 기본정보
				var prData = me.get("prData");
				
				// 품목정보 그리드 dataProvider
				var provider = me.$.gridPanel.getDataProvider();
				
				me.$.saveTest.body = {
					"prData"        : prData,
					"insertPrItems" : provider.getNewItems(),		// 신규 추가된 데이터들을 가져온다.
					"updatePrItems" : provider.getUpdateItems(),	// 수정된 데이터들을 가져온다.
					"deletePrItems" : provider.getRemoveItems()		// 삭제된 데이터들을 가져온다.  
				};
				
				// saveTest 요청
				UT.request(me.$.saveTest);
			});
		},
		// 저장 완료
		completeSaveTest : function(el, res) {
			var me = this,
				result = res.response;
			
			// 데이터 저장 성공
			if(result.result_status === DEF.SUCCESS) {
				UT.alert("STD.N2400");	// 저장 하였습니다.
				
				var prId = result.result_data.pr_id;
				
				// 저장하고 리턴받은 id를 조회조건으로 하여 화면을 재 조회한다.
				me.set("searchParam", {"pr_id" : prId});
				me.onFind();
			} else {
				// 오류메세지 처리
				UT.alert(UT.failureMessage(result));
			}
		},
	});
	</script>
</dom-module>