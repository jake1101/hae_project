{
    "project": {
        "name": "API",
        "description": "API",
        "version": "0.0.1"
    },
    "files": {
        "html\\cc-approval-summary.html": {
            "name": "html\\cc-approval-summary.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "html\\cc-dept-search.html": {
            "name": "html\\cc-dept-search.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "html\\cc-editor.html": {
            "name": "html\\cc-editor.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "html\\cc-from-to-date.html": {
            "name": "html\\cc-from-to-date.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "html\\cc-item-search.html": {
            "name": "html\\cc-item-search.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "html\\cc-job-search.html": {
            "name": "html\\cc-job-search.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "html\\cc-linked-vender.html": {
            "name": "html\\cc-linked-vender.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "html\\cc-multi-text-field.html": {
            "name": "html\\cc-multi-text-field.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "html\\cc-operorg-combobox-field.html": {
            "name": "html\\cc-operorg-combobox-field.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "html\\cc-operorg-multi-combobox-field.html": {
            "name": "html\\cc-operorg-multi-combobox-field.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "html\\cc-purc-grp.html": {
            "name": "html\\cc-purc-grp.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "html\\cc-sg-search.html": {
            "name": "html\\cc-sg-search.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "html\\cc-sp-operorg-combobox-field.html": {
            "name": "html\\cc-sp-operorg-combobox-field.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "html\\cc-sp-operorg-multi-combobox-field.html": {
            "name": "html\\cc-sp-operorg-multi-combobox-field.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "html\\cc-upload.html": {
            "name": "html\\cc-upload.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "html\\cc-user-search.html": {
            "name": "html\\cc-user-search.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "html\\cc-vendor-search.html": {
            "name": "html\\cc-vendor-search.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\def.js": {
            "name": "js\\def.js",
            "modules": {},
            "classes": {
                "DEF": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\editor.js": {
            "name": "js\\editor.js",
            "modules": {},
            "classes": {
                "EDITOR": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\grid.js": {
            "name": "js\\grid.js",
            "modules": {},
            "classes": {
                "GRID": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\i18n.js": {
            "name": "js\\i18n.js",
            "modules": {},
            "classes": {
                "I18N": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\message.js": {
            "name": "js\\message.js",
            "modules": {},
            "classes": {
                "MSG": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\upload.js": {
            "name": "js\\upload.js",
            "modules": {},
            "classes": {
                "UPLOAD": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\util.js": {
            "name": "js\\util.js",
            "modules": {},
            "classes": {
                "UT": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\validator.js": {
            "name": "js\\validator.js",
            "modules": {},
            "classes": {
                "VALID": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "DEF": {
            "name": "DEF",
            "shortname": "DEF",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\def.js",
            "line": 1,
            "description": "공통 속성을 정의한다"
        },
        "EDITOR": {
            "name": "EDITOR",
            "shortname": "EDITOR",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\editor.js",
            "line": 1,
            "description": "에디터"
        },
        "GRID": {
            "name": "GRID",
            "shortname": "GRID",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\grid.js",
            "line": 1,
            "description": "그리드에서 자주 사용하는 method를 정의한다"
        },
        "I18N": {
            "name": "I18N",
            "shortname": "I18N",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\i18n.js",
            "line": 1,
            "description": "다국어 변환"
        },
        "MSG": {
            "name": "MSG",
            "shortname": "MSG",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\message.js",
            "line": 1,
            "description": "공통 메시지를 정의한다\n\n    N ~ : 알림 메시지 정의\n    E ~ : 오류 메시지 정의\n    G ~ : 그리드 정의"
        },
        "UPLOAD": {
            "name": "UPLOAD",
            "shortname": "UPLOAD",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\upload.js",
            "line": 1,
            "description": "업로드"
        },
        "UT": {
            "name": "UT",
            "shortname": "UT",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\util.js",
            "line": 1,
            "description": "Util"
        },
        "VALID": {
            "name": "VALID",
            "shortname": "VALID",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\validator.js",
            "line": 1,
            "description": "데이터 유효성 검사\n1. 그리드 데이터의 유효성 검사:\n\n<pre>\n    // 그리드 생성\n    initGrid: function() {\n        var me = this;\n        ... 생략 ...\n        var validator = [];\n        validator.push({\n            fieldName: \"target_fieldname\",\n            check: [\"required\", \"!space\", \"unique\"],\n            maxLength: 18\n        });\n        ... 생략 ...\n        // 설정방법 1.\n        me.gridView = GRID.createGridView(me.$.gridPanel, fields, columns, {\n            validator: validator                    // 검사항목을 설정한다.\n        });\n\n        // 설정방법 2.\n        GRID.setValidator(me.gridView, validator);\n    }\n\n    // 저장\n    onSaveList: function() {\n        var me = this;\n        if (GRID.invalidData(me.gridView)) {        // GRID.invalidData 을 이용한다.\n            return;\n        }\n        GRID.saveList(me.gridView, function(created, updated, request) {\n            me.$.saveList.body = {\n                insertOrgTypes: created,\n                updateOrgTypes: updated\n            };\n            request(me.$.saveList);\n        });\n    }\n</pre>\n\n2. 일반 데이터 유효성 검사\n<pre>\n    // 방법 1.\n    // 데이터 유효성 설정\n    initValidator: function() {\n        var me = this;\n        me.set(\"detailInfo.$validator\", [{           // 데이터 객체의 $validator 에 검사 항목을 추가 한다.\n            text: \"조직유형\",\n            fieldName: \"target_fieldname\",\n            check: [\"selected\"]\n        }]);\n    }\n\n    // 저장\n    onSaveInfo: function() {\n        var me = this;\n        if (UT.invalidData(me.get(\"detailInfo\"))) {  // UT.invalidData 를 이용한다.\n            return;\n        }\n        ... 생략 ...\n        UT.save(me.$.saveInfo);\n    }\n\n    // 방법 2.\n    // 저장\n    onSaveInfo: function() {\n        var me = this;\n        var validator = [{ text: \"조직유형\", fieldName: \"target_fieldname\", check: [\"selected\"] }];\n        validator.push();\n        if (UT.invalidData(me.get(\"detailInfo\"), validator)) {  // UT.invalidData 를 이용한다.\n            return;\n        }\n        ... 생략 ...\n        UT.save(me.$.saveInfo);\n    }\n\n</pre>"
        }
    },
    "elements": {
        "cc-approval-summary": {
            "name": "cc-approval-summary",
            "attributes": [
                {
                    "name": "app-id",
                    "description": "해당 모듈의 id binding value <br>\n[string]"
                },
                {
                    "name": "aprv-typcd",
                    "description": "해당 모듈의 aprv_typcd binding value <br>\n[string]"
                }
            ],
            "file": "html\\cc-approval-summary.html",
            "line": 2,
            "description": "협력사 커스텀 태그\n\n    <cc-approval-summary app-id=\"{{poId}}\" aprv-typcd=\"{{aprvTypcd}}\"></cc-approval-summary>"
        },
        "cc-dept-search": {
            "name": "cc-dept-search",
            "attributes": [
                {
                    "name": "value",
                    "description": "해당 텍스트 필드 input value binding <br>\n[string] [optional]"
                },
                {
                    "name": "search-result",
                    "description": "검색 결과 object값 <br>\n[string] [optional]"
                },
                {
                    "name": "result-field",
                    "description": "단건으로 검색결과가 필요할 경우 검색 결과 object에 field <br>\n[string] [optional]"
                },
                {
                    "name": "result-value",
                    "description": "search-field에서 지정한 결과 object의 field의 value <br>\n[boolean] [optional]"
                },
                {
                    "name": "label-disabled",
                    "description": "label text가 보이지않도록 처리 <br>\n[boolean] [optional]"
                },
                {
                    "name": "value",
                    "description": "해당 텍스트 필드 input value binding <br>\n[string] [optional]"
                },
                {
                    "name": "search-result",
                    "description": "검색 결과 object값 <br>\n[string] [optional]"
                },
                {
                    "name": "result-field",
                    "description": "단건으로 검색결과가 필요할 경우 검색 결과 object에 field <br>\n[string] [optional]"
                },
                {
                    "name": "result-value",
                    "description": "search-field에서 지정한 결과 object의 field의 value <br>\n[boolean] [optional]"
                },
                {
                    "name": "label-disabled",
                    "description": "label text가 보이지않도록 처리 <br>\n[boolean] [optional]"
                },
                {
                    "name": "purcGrpTyp",
                    "description": "직무유형<br>\n[string] [optional]"
                }
            ],
            "file": "html\\cc-dept-search.html",
            "line": 2,
            "description": "부서검색 자동완성 text-field 커스텀 태그\n\n    <cc-dept-search class=\"w-150\" value=\"{{value값}}\" search-result=\"{{결과Object}}\" result-field=\"fieldName\" result-value=\"{{결과단건ValueBind}}\"></cc-dept-search>"
        },
        "cc-editor": {
            "name": "cc-editor",
            "attributes": [
                {
                    "name": "value",
                    "description": "에디터에 삽입될 내용 binding value <br>\n[string] [optional]"
                },
                {
                    "name": "value-type",
                    "description": "value 유형 <br>\n[string] [optional] default=\"body\" <br>\n    body    : <body> 태그 내부의 소스\n    body-ex : <body> 부터 </body> 까지의 소스 \n    html    : <html> 태그 내부의 소스 \n    html-ex : <html> 부터 </html>까지의 소스"
                },
                {
                    "name": "editable",
                    "description": "편집모드 설정 <br>\n[boolean] [optional] default=false"
                }
            ],
            "file": "html\\cc-editor.html",
            "line": 2,
            "description": "에디터 커스텀 태그\n\n    <cc-editor id=\"editor\" class=\"h-400\" value=\"{{value}}\" value-type=\"body\" editable=\"{{editable}}\"></cc-editor>",
            "example": [
                "\n    // methods\n    * syncValue() - 에디터 내용과 binding value의 값을 동기화한다. \n        someFunction: function() {\n            var me = this;\n            me.$.editor.syncValue();\n            ... \n        } "
            ]
        },
        "cc-from-to-date": {
            "name": "cc-from-to-date",
            "attributes": [
                {
                    "name": "from-date",
                    "description": "시작일자 value binding <br>\n[string] [optional]"
                },
                {
                    "name": "to-date",
                    "description": "종료일자 value binding <br>\n[string] [optional]"
                },
                {
                    "name": "init-from-date",
                    "description": "fromDate 기본값 설정 <br>\n(ex) init-from-value=\"-30\" (fromDate로 부터 30일 전으로 fromDate값 세팅)<br>\n[number] [optional]"
                },
                {
                    "name": "init-to-date",
                    "description": "toDate 기본값 설정 <br>\n[number] [optional] <br> \n(ex) init-to-value=\"30\" (toDate로 부터 30일 후로 toDate값 세팅)"
                },
                {
                    "name": "init-date",
                    "description": "fromDate, toDate 기본값 세팅 여부 <br>\n[boolean] [optional] default=true <br>\n- \"true\" 인 경우, fromDate = \"현재날짜 -7\", toDate=\"현재날짜\"로 세팅 됨 <br>\n- \"false\"인 경우, fromDate, toDate 값 세팅 안함."
                },
                {
                    "name": "time-zone",
                    "description": "sc-date-field의 value값 사용을 지정한다 <br>\n[boolean] [optional] default=false<br> \n- \"false\"인 경우, sc-date-field의 value를 String 값으로 사용 합니다."
                }
            ],
            "file": "html\\cc-from-to-date.html",
            "line": 2,
            "description": "from date ~ to date 를 위한 text input 커스텀 태그\n\n    <cc-from-to-date from-date=\"{{from_date}}\" to-date={{to_date}}></cc-from-to-date>"
        },
        "cc-multi-text-field": {
            "name": "cc-multi-text-field",
            "attributes": [
                {
                    "name": "value",
                    "description": "해당 텍스트 필드 input value binding <br>\n[string] [optional]"
                },
                {
                    "name": "placeholder",
                    "description": "placeholder <br>\n[string] [optional]"
                },
                {
                    "name": "multi-value",
                    "description": "멀티 value<br>\n[string] [optional]"
                },
                {
                    "name": "multi-check",
                    "description": "멀티 체크 초기값 Y or N ,default N<br>\n[string] [optional]"
                },
                {
                    "name": "value",
                    "description": "해당 텍스트 필드 input value binding <br>\n[string] [optional]"
                },
                {
                    "name": "placeholder",
                    "description": "placeholder <br>\n[string] [optional]"
                },
                {
                    "name": "title",
                    "description": "다이얼로그 팝업 제목 <br>\n[string] [optional]"
                },
                {
                    "name": "multi-value",
                    "description": "멀티 value<br>\n[string] [optional]"
                },
                {
                    "name": "multi-check",
                    "description": "멀티 체크 초기값 Y or N ,default N<br>\n[string] [optional]"
                }
            ],
            "file": "html\\cc-item-search.html",
            "line": 2,
            "description": "품목 검색을 위한 input field 커스텀 태그\n\n    <cc-item-search value=\"{{value}}\" multi-value=\"{{여러개받을value}}\" class=\"w-200\"></cc-item-search>"
        },
        "cc-purc-grp": {
            "name": "cc-purc-grp",
            "attributes": [
                {
                    "name": "value",
                    "description": "purc_grp_cd값 binding value <br>\n[string]"
                },
                {
                    "name": "display",
                    "description": "purc_grp_nm값 binding value <br>\n[string]"
                },
                {
                    "name": "value-field",
                    "description": "value로 binding될 필드명. 기본값:purc_grp_cd <br>\n[string] [optional]"
                },
                {
                    "name": "display-field",
                    "description": "input 영역에 표시될 필드명. 기본값:purc_grp_nm <br>\n[string] [optional]"
                },
                {
                    "name": "purc-grp-typ",
                    "description": "직무유형<br>\n[string]"
                },
                {
                    "name": "value",
                    "description": "purc_grp_cd값 binding value <br>\n[string]"
                },
                {
                    "name": "display",
                    "description": "purc_grp_nm값 binding value <br>\n[string]"
                },
                {
                    "name": "value-field",
                    "description": "value로 binding될 필드명. 기본값:purc_grp_cd <br>\n[string] [optional]"
                },
                {
                    "name": "display-field",
                    "description": "input 영역에 표시될 필드명. 기본값:purc_grp_nm <br>\n[string] [optional]"
                },
                {
                    "name": "purc-grp-typ",
                    "description": "직무유형<br>\n[string]"
                }
            ],
            "file": "html\\cc-job-search.html",
            "line": 2,
            "description": "구매그룹(cc-job-search) 커스텀 태그\n\n    <cc-job-searchvalue=\"{{value}}\" display=\"{{displayValue}}\" purc-grp-typ=\"PU\"></cc-job-search>"
        },
        "cc-linked-vender": {
            "name": "cc-linked-vender",
            "attributes": [
                {
                    "name": "vd-cd",
                    "description": "vd-cd값 binding value <br>\n[string]"
                },
                {
                    "name": "erp-vd-cd",
                    "description": "erp-vd-cd값 binding value <br>\n[string]"
                },
                {
                    "name": "vd-nm",
                    "description": "vd-nm값 binding value <br>\n[string]"
                },
                {
                    "name": "oper-org-cd",
                    "description": "운영조직코드<br>\n[string]"
                },
                {
                    "name": "link-typ",
                    "description": "연결유형<br>\n[string]"
                }
            ],
            "file": "html\\cc-linked-vender.html",
            "line": 2,
            "description": "협력사 커스텀 태그\n\n    <cc-linked-vender vd-cd=\"{{vdCd}}\" erp-vd-cd=\"{{erpVdCd}}\" vd-nm=\"{{vdNm}}\" oper-org-cd=\"{{operOrgCd}}\" link-typ=\"POEO\"></cc-linked-vender>"
        },
        "cc-operorg-combobox-field": {
            "name": "cc-operorg-combobox-field",
            "attributes": [
                {
                    "name": "value",
                    "description": "해당 텍스트 필드 input value binding <br>\n[string] [optional]"
                },
                {
                    "name": "placeholder",
                    "description": "placeholder <br>\n[string] [optional]"
                },
                {
                    "name": "selected-index",
                    "description": "선택 index <br>\n[string] [optional]"
                },
                {
                    "name": "disabled",
                    "description": "disabled <br>"
                },
                {
                    "name": "oper-unit-cd",
                    "description": "운영단위코드\n[string] [optional]"
                },
                {
                    "name": "disabled",
                    "description": "disabled <br>"
                }
            ],
            "file": "html\\cc-operorg-combobox-field.html",
            "line": 2,
            "description": "운영단위 콤보박스 필드 커스텀 태그\najax통신을 사용하는 custom dom으로 promise로 묶어야함으로 id를 부여 하여 구현한다.\nservice함수를 구현 한다.\n\n    <cc-operorg-combobox-field id=\"operorgcombobox\" class=\"w-150\" selected-index=\"0\" value=\"{{searchParam.oper_org_cd}}\" placeholder=\"전체\" oper-unit-cd=\"PO\"></cc-operorg-combobox-field>"
        },
        "cc-operorg-multi-combobox-field": {
            "name": "cc-operorg-multi-combobox-field",
            "attributes": [
                {
                    "name": "value",
                    "description": "해당 텍스트 필드 input value binding <br>\n[string] [optional]"
                },
                {
                    "name": "placeholder",
                    "description": "placeholder <br>\n[string] [optional]"
                },
                {
                    "name": "enable-check-all",
                    "description": "전체 선택 체크박스표시 여부 default값 true<br>\n[string] [optional]"
                },
                {
                    "name": "disabled",
                    "description": "disabled <br>"
                },
                {
                    "name": "oper-unit-cd",
                    "description": "운영단위코드\n[string] [optional]"
                },
                {
                    "name": "disabled",
                    "description": "disabled <br>"
                }
            ],
            "file": "html\\cc-operorg-multi-combobox-field.html",
            "line": 2,
            "description": "운영단위 멀티 콤보박스 필드 커스텀 태그\najax통신을 사용하는 custom dom으로 promise로 묶어야함으로 id를 부여 하여 구현한다.\nservice함수를 구현 한다.\n\n    <cc-operorg-multi-combobox-field id=\"operorgcombobox\" class=\"w-150\" selected-index=\"0\" value=\"{{searchParam.oper_org_cd}}\" placeholder=\"전체\" oper-unit-cd=\"PO\"></cc-operorg-multi-combobox-field>"
        },
        "cc-sg-search": {
            "name": "cc-sg-search",
            "attributes": [
                {
                    "name": "value",
                    "description": "해당 텍스트 필드 input value binding <br>\n[string] [optional]"
                },
                {
                    "name": "search-result",
                    "description": "검색 결과 object값 <br>\n[string] [optional]"
                },
                {
                    "name": "result-field",
                    "description": "단건으로 검색결과가 필요할 경우 검색 결과 object에 field <br>\n[string] [optional]"
                },
                {
                    "name": "result-value",
                    "description": "search-field에서 지정한 결과 object의 field의 value <br>\n[boolean] [optional]"
                },
                {
                    "name": "label-disabled",
                    "description": "label text가 보이지않도록 처리 <br>\n[boolean] [optional]"
                },
                {
                    "name": "linkTyp",
                    "description": "연결유형<br>\n[string] [optional]"
                }
            ],
            "file": "html\\cc-sg-search.html",
            "line": 2,
            "description": "소싱그룹 검색 자동완성 text-field 커스텀 태그\n\n    <cc-sg-search class=\"w-150\" value=\"{{value값}}\" search-result=\"{{결과Object}}\" result-field=\"fieldName\" result-value=\"{{결과단건ValueBind}}\" oper_org_cd=\"{{ArrayType or Object}}\" link_typ=\"SOGO\"></cc-sg-search>"
        },
        "cc-sp-operorg-combobox-field": {
            "name": "cc-sp-operorg-combobox-field",
            "attributes": [
                {
                    "name": "value",
                    "description": "해당 텍스트 필드 input value binding <br>\n[string] [optional]"
                },
                {
                    "name": "placeholder",
                    "description": "placeholder <br>\n[string] [optional]"
                },
                {
                    "name": "selected-index",
                    "description": "선택 index <br>\n[string] [optional]"
                },
                {
                    "name": "disabled",
                    "description": "disabled <br>"
                },
                {
                    "name": "oper-unit-cd",
                    "description": "운영단위코드\n[string] [optional]"
                },
                {
                    "name": "disabled",
                    "description": "disabled <br>"
                }
            ],
            "file": "html\\cc-sp-operorg-combobox-field.html",
            "line": 2,
            "description": "운영단위 콤보박스 필드 커스텀 태그\najax통신을 사용하는 custom dom으로 promise로 묶어야함으로 id를 부여 하여 구현한다.\nservice함수를 구현 한다.\n\n    <cc-sp-operorg-combobox-field id=\"operorgcombobox\" class=\"w-150\" selected-index=\"0\" value=\"{{searchParam.oper_org_cd}}\" placeholder=\"전체\" oper-unit-cd=\"PO\"></cc-sp-operorg-combobox-field>"
        },
        "cc-sp-operorg-multi-combobox-field": {
            "name": "cc-sp-operorg-multi-combobox-field",
            "attributes": [
                {
                    "name": "value",
                    "description": "해당 텍스트 필드 input value binding <br>\n[string] [optional]"
                },
                {
                    "name": "placeholder",
                    "description": "placeholder <br>\n[string] [optional]"
                },
                {
                    "name": "enable-check-all",
                    "description": "전체 선택 체크박스표시 여부 default값 true<br>\n[string] [optional]"
                },
                {
                    "name": "disabled",
                    "description": "disabled <br>"
                },
                {
                    "name": "oper-unit-cd",
                    "description": "운영단위코드\n[string] [optional]"
                },
                {
                    "name": "disabled",
                    "description": "disabled <br>"
                }
            ],
            "file": "html\\cc-sp-operorg-multi-combobox-field.html",
            "line": 2,
            "description": "운영단위 멀티 콤보박스 필드 커스텀 태그\najax통신을 사용하는 custom dom으로 promise로 묶어야함으로 id를 부여 하여 구현한다.\nservice함수를 구현 한다.\n\n    <cc-sp-operorg-multi-combobox-field id=\"operorgcombobox\" class=\"w-150\" selected-index=\"0\" value=\"{{searchParam.oper_org_cd}}\" placeholder=\"전체\" oper-unit-cd=\"PO\"></cc-sp-operorg-multi-combobox-field>"
        },
        "cc-upload": {
            "name": "cc-upload",
            "attributes": [
                {
                    "name": "value",
                    "description": "binding value : value에 값이 할당되면, 업로드 파일 목록을 로드한다. <br>\n[string] [optional]"
                },
                {
                    "name": "max-total-file-count",
                    "description": "총 파일 개수 설정. 0 - 제한없음<br>\n[number] [optional] default=0"
                },
                {
                    "name": "max-total-file-count",
                    "description": "총 파일 용량 설정. 0 - 제한없음<br>\n[string] [optional] default=0<br>\n단위 - B(byte), KB(kilobyte), MB(megabyte), GB(gigabyte)"
                },
                {
                    "name": "image-only",
                    "description": "이미지 파일만 업로드 가능 설정.<br>\n[boolean] [optional] default=false<br>"
                },
                {
                    "name": "allow-extension",
                    "description": "허용할 확장자 설정.<br>\n[string] [optional]<br> 확장자가 여러개일 경우 콤마(,)로 구분하여 설정합니다"
                },
                {
                    "name": "width",
                    "description": "넓이 - 넓이는 \"px\", \"%\" 모두 가능<br>\n[string] [optional] default=100%<br>"
                },
                {
                    "name": "height",
                    "description": "높이 - 높이는 \"px\" 만 가능, 최소 높이값은 \"120px\" <br>\n[string] [optional] default=200px<br>"
                },
                {
                    "name": "editable",
                    "description": "편집모드 설정 <br>\n[boolean] [optional] default=false"
                }
            ],
            "file": "html\\cc-upload.html",
            "line": 2,
            "description": "업로드 커스텀 태그\n\n    <cc-upload id=\"upload\" class=\"h-200\" value=\"{{value}}\" editable=\"{{editable}}\" max-total-file-count=\"1\" max-total-file-size=\"20MB\" image-only=\"true\"></cc-upload>",
            "example": [
                "\n    // methods\n    * getId() - // 업로드 id 얻기\n        someFunction: function() {\n            var me = this;\n            UT.save(me.$.saveInfo, {\n                attachGrpCdNames: \"detail.att_no\",\n                attachUploadIds: me.$.upload.getId()\n            });\n        }"
            ]
        },
        "cc-user-search": {
            "name": "cc-user-search",
            "attributes": [
                {
                    "name": "value",
                    "description": "해당 텍스트 필드 input value binding <br>\n[string] [optional]"
                },
                {
                    "name": "search-result",
                    "description": "검색 결과 object값 <br>\n[string] [optional]"
                },
                {
                    "name": "result-field",
                    "description": "단건으로 검색결과가 필요할 경우 검색 결과 object에 field <br>\n[string] [optional]"
                },
                {
                    "name": "result-value",
                    "description": "search-field에서 지정한 결과 object의 field의 value <br>\n[boolean] [optional]"
                },
                {
                    "name": "label-disabled",
                    "description": "label text가 보이지않도록 처리 <br>\n[boolean] [optional]"
                }
            ],
            "file": "html\\cc-user-search.html",
            "line": 2,
            "description": "사용자 검색 자동완성 text field 커스텀 태그\n\n    <cc-user-search class=\"w-150\" value=\"{{value값}}\" search-result=\"{{결과Object}}\" result-field=\"fieldName\" result-value=\"{{결과단건ValueBind}}\"></cc-user-search>"
        }
    },
    "classitems": [
        {
            "file": "html\\cc-item-search.html",
            "line": 27,
            "description": ": 품목코드 검색 custom tag\n  <pre>\n </pre>",
            "author": ": Yeon-u Kim",
            "filename": ":",
            "since": "2016. 5. 10.",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 7,
            "description": "성공 - 서버에서 데이터 처리 후 결과 코드",
            "itemtype": "property",
            "name": "SUCCESS",
            "type": "String",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 15,
            "description": "실패 - 서버에서 데이터 처리 후 결과 코드",
            "itemtype": "property",
            "name": "FAIL",
            "type": "String",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 23,
            "description": "데이터 중복 - 서버에서 데이터 처리 후 결과 코드",
            "itemtype": "property",
            "name": "DUPLICATED",
            "type": "String",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 31,
            "description": "데이터 사용중 - 서버에서 데이터 처리 후 결과 코드",
            "itemtype": "property",
            "name": "USED",
            "type": "String",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 39,
            "description": "권한코드 - 조회",
            "itemtype": "property",
            "name": "READ",
            "type": "String",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 47,
            "description": "권한코드 - 저장",
            "itemtype": "property",
            "name": "SAVE",
            "type": "String",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 55,
            "description": "권한코드 - 결재",
            "itemtype": "property",
            "name": "APPROVAL",
            "type": "String",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 62,
            "description": "RFX 실패",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 67,
            "description": "RFX 포기",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 73,
            "description": "편집가능 컬럼 스타일",
            "itemtype": "property",
            "name": "styles.editable",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 85,
            "description": "편집불가능 컬럼 스타일",
            "itemtype": "property",
            "name": "styles.readonly",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 97,
            "description": "action 컬럼 스타일",
            "itemtype": "property",
            "name": "styles.actionable",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 109,
            "description": "Y/N으로 구분되는 컬럼의 format 스타일",
            "itemtype": "property",
            "name": "styles.formatYn",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 120,
            "description": "정수 숫자 컬럼의 format (콤마) 스타일",
            "itemtype": "property",
            "name": "styles.formatInteger",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 131,
            "description": "소수점 숫자 컬럼의 format (콤마) 스타일",
            "itemtype": "property",
            "name": "styles.formatDecimal",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 142,
            "description": "날짜 format 스타일",
            "itemtype": "property",
            "name": "styles.formatDate",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 153,
            "description": "날짜 시간 format 스타일",
            "itemtype": "property",
            "name": "styles.formatDatetime",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 164,
            "description": "Y/N으로 구분되는 checkbox 컬럼의 disabled 스타일",
            "itemtype": "property",
            "name": "styles.disabledCheckboxYn",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 177,
            "description": "데이터 저장을 위해 서버로 전송하는 포맷 스타일",
            "itemtype": "property",
            "name": "styles.outputFormat",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 189,
            "description": "icons 없음",
            "itemtype": "property",
            "name": "styles.icons.empty",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 199,
            "description": "검색 icon",
            "itemtype": "property",
            "name": "styles.icons.search",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 210,
            "description": "링크 icon",
            "itemtype": "property",
            "name": "styles.icons.link",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 221,
            "description": "첨부파일 icon",
            "itemtype": "property",
            "name": "styles.icons.attach",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 232,
            "description": "필수컬럼 icon",
            "itemtype": "property",
            "name": "styles.icons.required",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 249,
            "description": "Y/N으로 구분되는 checkbox 컬럼 renderer",
            "itemtype": "property",
            "name": "renderer.checkboxYn",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 266,
            "description": "DEF.renderer.checkboxYn 의 disabled(editable=false) renderer",
            "itemtype": "property",
            "name": "renderer.disabledCheckboxYn",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 283,
            "description": "그리드에서 사용하는 icons 정보 정의",
            "itemtype": "property",
            "name": "icons",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 302,
            "description": "콤보박스 컬럼 editor",
            "itemtype": "property",
            "name": "editor.combobox",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 315,
            "description": "정수 숫자 입력 컬럼 editor",
            "itemtype": "property",
            "name": "editor.integer",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 328,
            "description": "소수점 숫자 입력 컬럼 editor",
            "itemtype": "property",
            "name": "editor.decimal",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\def.js",
            "line": 341,
            "description": "달력선택 컬럼 editor",
            "itemtype": "property",
            "name": "editor.datePicker",
            "type": "Object",
            "class": "DEF"
        },
        {
            "file": "js\\editor.js",
            "line": 7,
            "description": "에디터 생성",
            "itemtype": "method",
            "name": "createEditor",
            "params": [
                {
                    "name": "container",
                    "description": "container",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "에디터 생성 옵션",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "width",
                            "description": "가로크기",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"100%\""
                        },
                        {
                            "name": "height",
                            "description": "세로크기",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"100%\""
                        },
                        {
                            "name": "editable",
                            "description": "편집모드 여부",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Promise",
                "type": "Object"
            },
            "async": 1,
            "example": [
                "\n    initEditor: function() {\n        var me = this;\n        var options = {\n            editable: me.get(\"editable\") === true || me.get(\"editable\") === \"true\"\n        };\n        return EDITOR.createEditor(me.$.editorPanel, options);\n    }"
            ],
            "class": "EDITOR"
        },
        {
            "file": "js\\editor.js",
            "line": 58,
            "description": "Html 값 지정 - &lt;html> 태그 내부의 소스",
            "itemtype": "method",
            "name": "setHtmlValue",
            "params": [
                {
                    "name": "editorId",
                    "description": "editorId",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "콘텐츠 값",
                    "type": "String"
                }
            ],
            "example": [
                "\n    changedValue: function(value) {\n        var me = this;\n        EDITOR.setHtmlValue(me.editorId, value);\n    }"
            ],
            "class": "EDITOR"
        },
        {
            "file": "js\\editor.js",
            "line": 74,
            "description": "Html 값 얻기 - &lt;html> 태그 내부의 소스",
            "itemtype": "method",
            "name": "getHtmlValue",
            "params": [
                {
                    "name": "editorId",
                    "description": "editorId",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n    syncValue: function() {\n        var me = this;\n        if (me.editorId) {\n            me.set(\"value\", EDITOR.getHtmlValue(me.editorId));\n        }\n    }"
            ],
            "class": "EDITOR"
        },
        {
            "file": "js\\editor.js",
            "line": 92,
            "description": "Html 값 지정 - &lt;html> 부터 &lt;/html>까지의 소스",
            "itemtype": "method",
            "name": "setHtmlValueEx",
            "params": [
                {
                    "name": "editorId",
                    "description": "editorId",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "콘텐츠 값",
                    "type": "String"
                }
            ],
            "example": [
                "\n    changedValue: function(value) {\n        var me = this;\n        EDITOR.setHtmlValueEx(me.editorId, value);\n    }"
            ],
            "class": "EDITOR"
        },
        {
            "file": "js\\editor.js",
            "line": 108,
            "description": "Html 값 얻기 - &lt;html> 부터 &lt;/html>까지의 소스",
            "itemtype": "method",
            "name": "getHtmlValueEx",
            "params": [
                {
                    "name": "editorId",
                    "description": "editorId",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n    syncValue: function() {\n        var me = this;\n        if (me.editorId) {\n            me.set(\"value\", EDITOR.getHtmlValueEx(me.editorId));\n        }\n    }"
            ],
            "class": "EDITOR"
        },
        {
            "file": "js\\editor.js",
            "line": 126,
            "description": "Body 값 지정 - &lt;body> 태그 내부의 소스",
            "itemtype": "method",
            "name": "setBodyValue",
            "params": [
                {
                    "name": "editorId",
                    "description": "editorId",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "콘텐츠 값",
                    "type": "String"
                }
            ],
            "example": [
                "\n    changedValue: function(value) {\n        var me = this;\n        EDITOR.setBodyValue(me.editorId, value);\n    }"
            ],
            "class": "EDITOR"
        },
        {
            "file": "js\\editor.js",
            "line": 142,
            "description": "Body 값 얻기 - &lt;body> 태그 내부의 소스",
            "itemtype": "method",
            "name": "getBodyValue",
            "params": [
                {
                    "name": "editorId",
                    "description": "editorId",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n    syncValue: function() {\n        var me = this;\n        if (me.editorId) {\n            me.set(\"value\", EDITOR.getBodyValue(me.editorId));\n        }\n    }"
            ],
            "class": "EDITOR"
        },
        {
            "file": "js\\editor.js",
            "line": 160,
            "description": "Body 값 지정 - &lt;body> 부터 &lt;/body>까지의 소스",
            "itemtype": "method",
            "name": "setBodyValueEx",
            "params": [
                {
                    "name": "editorId",
                    "description": "editorId",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "콘텐츠 값",
                    "type": "String"
                }
            ],
            "example": [
                "\n    changedValue: function(value) {\n        var me = this;\n        EDITOR.setBodyValueEx(me.editorId, value);\n    }"
            ],
            "class": "EDITOR"
        },
        {
            "file": "js\\editor.js",
            "line": 176,
            "description": "Body 값 얻기 - &lt;body> 부터 &lt;/body>까지의 소스",
            "itemtype": "method",
            "name": "getBodyValueEx",
            "params": [
                {
                    "name": "editorId",
                    "description": "editorId",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n    syncValue: function() {\n        var me = this;\n        if (me.editorId) {\n            me.set(\"value\", EDITOR.getBodyValueEx(me.editorId));\n        }\n    }"
            ],
            "class": "EDITOR"
        },
        {
            "file": "js\\editor.js",
            "line": 194,
            "description": "에디터 콘텐츠 값의 유무 검사",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "editorId",
                    "description": "editorId",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true is empty",
                "type": "Boolean"
            },
            "example": [
                "\n    if (EDITOR.isEmpty(me.editorId) {\n       ...\n    }"
            ],
            "class": "EDITOR"
        },
        {
            "file": "js\\editor.js",
            "line": 209,
            "description": "편집모드 설정",
            "itemtype": "method",
            "name": "setEditable",
            "params": [
                {
                    "name": "editorId",
                    "description": "editorId",
                    "type": "String"
                },
                {
                    "name": "editable",
                    "description": "editable",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n    changedEditable: function(editable) {\n        var me = this;\n        if (me.editorId) {\n            EDITOR.setEditable(me.editorId, editable);\n        }\n    }"
            ],
            "class": "EDITOR"
        },
        {
            "file": "js\\editor.js",
            "line": 227,
            "description": "html 삽입",
            "itemtype": "method",
            "name": "setInsertHtml",
            "params": [
                {
                    "name": "editorId",
                    "description": "editorId",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value",
                    "type": "String"
                }
            ],
            "example": [
                "\n    setInsertHtml: function(value) {\n        var me = this;\n        if (me.editorId) {\n            EDITOR.setInsertHtml(me.editorId, value);\n        }\n    }"
            ],
            "class": "EDITOR"
        },
        {
            "file": "js\\grid.js",
            "line": 8,
            "description": "그리드 생성",
            "itemtype": "method",
            "name": "createGridView",
            "params": [
                {
                    "name": "container",
                    "description": "container",
                    "type": "Object"
                },
                {
                    "name": "fields",
                    "description": "그리드 fields 정보",
                    "type": "Array"
                },
                {
                    "name": "columns",
                    "description": "그리드 columns 정보",
                    "type": "Array"
                },
                {
                    "name": "configOptions",
                    "description": "- GRID.setConfig 참조",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "grid",
                "type": "Object"
            },
            "example": [
                "\n    initGrid: function() {\n        var me = this;\n        var fields = [\n            \"field1\",\n            \"field2 | datetime\",\n            \"field3 | number\"\n        ];\n        var columns = [\n            \"field1 | 필드1 | 150 | near\",\n            \"field2 | 필드2 | 150\",\n            \"field3 | 필드3 | 150\"\n        ];\n        var validator = [];\n        validator.push({\n            fieldName: \"field1\",\n            check: [\"required\", \"!space\", \"unique\"],\n            maxLength: 18\n        });\n\n        me.gridView = GRID.createGridView(me.$.gridPanel, fields, columns, {\n            actionFields: [\"field1\"],\n            editableFields: [\"field2\"],\n            editableCheckFields: [\"field3\"],\n            insertedAfterEditableFields: [\"field1\"],\n            checkableExpression: \"value['field3'] = 0\",\n            itemCountPropertyBinding: function(itemCount) {\n                me.set(\"gridItemCount\", itemCount);\n            },\n            validator: validator\n        });\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 60,
            "description": "트리 그리드 생성",
            "itemtype": "method",
            "name": "createTreeView",
            "params": [
                {
                    "name": "container",
                    "description": "container",
                    "type": "Object"
                },
                {
                    "name": "fields",
                    "description": "그리드 fields 정보",
                    "type": "Array"
                },
                {
                    "name": "columns",
                    "description": "그리드 columns 정보",
                    "type": "Array"
                },
                {
                    "name": "configOptions",
                    "description": "- GRID.setConfig 참조",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "grid",
                "type": "Object"
            },
            "example": [
                "\n    initGrid: function() {\n        var me = this;\n        var fields = [\n            \"field1\",\n            \"field2 | datetime\",\n            \"field3 | number\"\n        ];\n        var columns = [\n            \"field1 | 필드1 | 150 | near\",\n            \"field2 | 필드2 | 150\",\n            \"field3 | 필드3 | 150\"\n        ];\n        me.gridView = GRID.createTreeView(me.$.gridPanel, fields, columns, {\n            editableCheckFields: [\"field1\"],\n            treeItemCheckedMode: \"children\",\n            itemCountPropertyBinding: function(itemCount) {\n                me.set(\"gridItemCount\", itemCount);\n            }\n        });\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 101,
            "description": "그리드 리사이즈 event 리스너 추가",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "addResizeEvent",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "container",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    createGridView: function(container, fields, columns, configOptions) {\n        ...\n        GRID.addResizeEvent(gridView, container);\n        ...\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 123,
            "description": "그리드 설정",
            "itemtype": "method",
            "name": "setConfig",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fields",
                    "description": "그리드 fields 정보",
                    "type": "Array"
                },
                {
                    "name": "columns",
                    "description": "그리드 columns 정보",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "actionFields",
                            "description": "action 컬럼",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "editableFields",
                            "description": "편집가능 컬럼",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "editableCheckFields",
                            "description": "checkbox 컬럼",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "insertedAfterEditableFields",
                            "description": "신규 row 추가 후 편집 가능 컬럼",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "validator",
                            "description": "유효성 검사 설정",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "checkableExpression]         checkBar의 체크 가능 설정. (예)\"value['use_count_org'",
                            "description": "= 0\"",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "treeItemCheckedMode",
                            "description": "leaf: 하위 노드가 없는 것만 체크 가능, children: 하위 노드 모두 체크, ancestor: 상위 노드 모두 체크",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "enableContextMenu",
                            "description": "context menu 활성 여부",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "itemCountPropertyBinding",
                            "description": "grid item count property bind  - 그리드의 데이터 수 표시값 바인드 함수",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onRowInsertedHandler",
                            "description": "onRowInserted handler",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onRowAddedHandler",
                            "description": "onRowAdded handler",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onItemCheckedHandler",
                            "description": "onItemChecked handler",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onCellEditedHandler",
                            "description": "onCellEdited handler",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFilteringChangedHandler",
                            "description": "onFilteringChanged handler",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "async": 1,
            "example": [
                "\n    createGridView: function(container, fields, columns, configOptions) {\n        ...\n        GRID.setConfig(gridView, fields, columns, configOptions);\n        ...\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 350,
            "description": "그리드의 디폴트 옵션 설정",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setDefaultOptions",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    createGridView: function(container, fields, columns, configOptions) {\n        ...\n        GRID.setDefaultOptions(gridView);\n        ...\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 422,
            "description": "그리드 옵션 설정",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "그리드의 옵션",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        GRID.setOptions(me.gridView, {\n            stateBar: {\n                visible: false\n            },\n            checkBar: {\n                visible: false\n            }\n        });\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 449,
            "description": "그리드의 아이템수 바인딩",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "itemCountPropertyBinding",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    gridView.onFilteringChanged = function(grid) {\n        GRID.itemCountPropertyBinding(grid);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 467,
            "description": "그리드의 필드 정보를 설정한다.",
            "itemtype": "method",
            "name": "setFields",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fields",
                    "description": "그리드의 필드 정보\n<pre>\nfields : array (object or string)\n       : string 형식 - fieldName:dataType(text, bool, number, datetime) - dataType이 text 인 경우는 생략가능\n       : object - string 형식의 fieldName, dataType 이외에 추가 설정이 필요한 경우는 object 형태를 이용한다.\n</pre>",
                    "type": "Array"
                }
            ],
            "example": [
                "\n    setupGrid: function(gridView) {\n        var fields = [\n            \"field1\",\n            \"field2 | datetime\",\n            \"field3 | number\"\n        ];\n        GRID.setFields(gridView, fields);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 514,
            "description": "그리드의 컬럼 정보를 설정한다.",
            "itemtype": "method",
            "name": "setColumns",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "columns",
                    "description": "그리드의 컬럼 정보\n<pre>\ncolumns : array (object or string)\n        : string 형식 - fieldName|text|width|align(center, near, far) - align이 center 인 경우는 생략가능\n        : object - string 형식의 fieldName, text, width, align 이외에 추가 설정이 필요한 경우는 object 형태를 이용한다.\n</pre>",
                    "type": "Array"
                }
            ],
            "example": [
                "\n    setupGrid: function(gridView) {\n        var columns = [\n            \"field1 | 필드1 | 150 | near\",\n            \"field2 | 필드2 | 150\",\n            \"field3 | 필드3 | 150\"\n        ];\n        GRID.setColumns(gridView, columns);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 574,
            "description": "그리드 액션 컬럼으로 설정한다.",
            "itemtype": "method",
            "name": "setActionColumn",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                }
            ],
            "example": [
                "\n    setupGrid: function(gridView) {\n        GRID.setActionColumn(gridView, [\"field1\"]);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 589,
            "description": "그리드 컬럼 visible 를 설정한다.",
            "itemtype": "method",
            "name": "setVisibleColumn",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                }
            ],
            "example": [
                "\n    setupGrid: function(gridView) {\n        GRID.setVisibleColumn(gridView, [\"field1\"], false);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 614,
            "description": "그리드 편집가능 컬럼으로 설정한다.",
            "itemtype": "method",
            "name": "setEditableColumn",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                }
            ],
            "example": [
                "\n    setupGrid: function(gridView) {\n        GRID.setEditableColumn(gridView, [\"field1\"]);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 639,
            "description": "그리드 flexible 컬럼으로 설정한다.",
            "itemtype": "method",
            "name": "setFlexibleColumn",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                }
            ],
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        GRID.setFlexibleColumn(me.gridView, [\"field1\"]);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 663,
            "description": "그리드 코드 컬럼으로 설정한다",
            "itemtype": "method",
            "name": "setCodeColumn",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                },
                {
                    "name": "codes",
                    "description": "코드 목록",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "valueKey",
                            "description": "코드 목록에서 value를 가르키는 key값",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"data\""
                        },
                        {
                            "name": "labelKey",
                            "description": "코드 목록에서 label을 가르키는 key값",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"label\""
                        },
                        {
                            "name": "defaultLabel",
                            "description": "코드 목록에서 defaultLabel 설정",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        GRID.setCodeColumn(me.gridView, \"field1\", me.codes.code1);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 712,
            "description": "그리드 콤보 컬럼으로 설정한다",
            "itemtype": "method",
            "name": "setComboColumn",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                },
                {
                    "name": "codes",
                    "description": "코드 목록",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "valueKey",
                            "description": "코드 목록에서 value를 가르키는 key값",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"data\""
                        },
                        {
                            "name": "labelKey",
                            "description": "코드 목록에서 label을 가르키는 key값",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"label\""
                        },
                        {
                            "name": "defaultLabel",
                            "description": "코드 목록에서 defaultLabel 설정",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        GRID.setComboColumn(me.gridView, \"field1\", me.codes.code1);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 740,
            "description": "그리드의 주콤보 컬럼에 대한 부콤보 컬럼으로 설정한다.",
            "itemtype": "method",
            "name": "setSubComboColumn",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "masterFieldName",
                    "description": "주콤보 필드명",
                    "type": "String"
                },
                {
                    "name": "subFieldName",
                    "description": "부콤보 필드명",
                    "type": "String"
                },
                {
                    "name": "codes",
                    "description": "코드 목록",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "valueKey",
                            "description": "코드 목록에서 value를 가르키는 key값",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"data\""
                        },
                        {
                            "name": "labelKey",
                            "description": "코드 목록에서 label을 가르키는 key값",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"label\""
                        },
                        {
                            "name": "relationKey",
                            "description": "코드 목록에서 주콤보 컬럼의 값을 가르키는 key값",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"relation\""
                        }
                    ]
                }
            ],
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        GRID.setComboColumn(me.gridView, \"field1\", me.codes.code1);\n        GRID.setSubComboColumn(me.gridView, \"field1\", \"field2\", me.codes.code2);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 791,
            "description": "그리드의 체크박스 컬럼으로 설정한다.",
            "itemtype": "method",
            "name": "setCheckboxColumn",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "styles",
                            "description": "Y/N으로 구분되는 컬럼의 format 스타일",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "DEF.styles.formatYn"
                        },
                        {
                            "name": "renderer",
                            "description": "Y/N으로 구분되는 컬럼의 checkbox renderer",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "DEF.renderer.checkboxYn"
                        }
                    ]
                }
            ],
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        GRID.setCheckboxColumn(me.gridView, [\"field1\"]);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 821,
            "description": "그리드의 정수 숫자 컬럼으로 설정한다.",
            "itemtype": "method",
            "name": "setIntegerColumn",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "maxLength",
                            "description": "입력할 수 있는 문자의 최대 개수. 0 이면 제한이 없다",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "DEF.editor.integer.maxLength"
                        },
                        {
                            "name": "positiveOnly",
                            "description": "true: 양수값만 입력할수 있다",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "DEF.editor.integer.positiveOnly"
                        },
                        {
                            "name": "numberFormat",
                            "description": "\"#,000\" : comma",
                            "type": "String",
                            "optional": true,
                            "optdefault": "DEF.styles.formatInteger.numberFormat"
                        },
                        {
                            "name": "textAlignment",
                            "description": "\"far\": 오른쪽 정렬",
                            "type": "String",
                            "optional": true,
                            "optdefault": "DEF.styles.formatInteger.textAlignment"
                        }
                    ]
                }
            ],
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        GRID.setIntegerColumn(me.gridView, [\"field1\"]);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 857,
            "description": "그리드의 소수점 숫자 컬럼으로 설정한다.",
            "itemtype": "method",
            "name": "setDecimalColumn",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "maxLength",
                            "description": "입력할 수 있는 문자의 최대 개수. 0 이면 제한이 없다",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "DEF.editor.decimal.maxLength"
                        },
                        {
                            "name": "positiveOnly",
                            "description": "true: 양수값만 입력할수 있다",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "DEF.editor.decimal.positiveOnly"
                        },
                        {
                            "name": "numberFormat",
                            "description": "\"#,000.00\" : comma, 소수점 2자리",
                            "type": "String",
                            "optional": true,
                            "optdefault": "DEF.styles.formatDecimal.numberFormat"
                        },
                        {
                            "name": "textAlignment",
                            "description": "\"far\": 오른쪽 정렬",
                            "type": "String",
                            "optional": true,
                            "optdefault": "DEF.styles.formatDecimal.textAlignment"
                        }
                    ]
                }
            ],
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        GRID.setDecimalColumn(me.gridView, [\"field1\"]);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 893,
            "description": "그리드의 DatePicker 컬럼으로 설정한다.",
            "itemtype": "method",
            "name": "setDatePickerColumn",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "editor",
                            "description": "DateCellEditor",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "DEF.editor.datePicker"
                        },
                        {
                            "name": "styles",
                            "description": "날짜 format 스타일",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "DEF.styles.formatDate"
                        }
                    ]
                }
            ],
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        GRID.setDatePickerColumn(me.gridView, [\"field1\"]);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 920,
            "description": "그리드의 icon 컬럼으로 설정한다.",
            "itemtype": "method",
            "name": "setIconColumn",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "styles",
                            "description": "검색 icon 스타일 // DEF.styles.icons 참조.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "DEF.styles.icons.search"
                        }
                    ]
                }
            ],
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        GRID.setIconColumn(me.gridView, [\"field1\"]);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 955,
            "description": "그리드의 dynamic style을 지정한다.",
            "itemtype": "method",
            "name": "setColumnDynamicStyle",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                },
                {
                    "name": "criteria",
                    "description": "조건식 (예)\"values['field2'] <> 'Y'\"",
                    "type": "String"
                },
                {
                    "name": "styles",
                    "description": "적용할 스타일",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        GRID.setColumnDynamicStyle(me.gridView, [\"field1\"], \"values['field2'] <> 'Y'\", {background: \"#fafafa\"});\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 982,
            "description": "그리드의 컬럼 스타일 지정",
            "itemtype": "method",
            "name": "setColumnStyle",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                },
                {
                    "name": "styles",
                    "description": "적용할 스타일",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        GRID.setColumnStyle(me.gridView, [\"field1\"], {background: \"#fafafa\"});\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1004,
            "description": "그리드의 컬럼 프로퍼티 값 지정",
            "itemtype": "method",
            "name": "setColumnProperty",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                },
                {
                    "name": "propertyName",
                    "description": "프로퍼티 명",
                    "type": "String"
                },
                {
                    "name": "propertyValue",
                    "description": "프로퍼티 값",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        GRID.setColumnProperty(me.gridView, \"field1\", \"textInputCase\", \"upper\");\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1026,
            "description": "그리드의 action button 컬럼으로 설정한다.",
            "itemtype": "method",
            "name": "setActionButtonColumn",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                },
                {
                    "name": "clickedCallback()",
                    "description": "버튼 클릭 후 콜백함수",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "grid",
                            "description": "grid",
                            "type": "Object"
                        },
                        {
                            "name": "itemIndex",
                            "description": "itemIndex",
                            "type": "Object"
                        },
                        {
                            "name": "column",
                            "description": "column",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "async": 1,
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        GRID.setActionButtonColumn(me.gridView, \"field1\", function(grid, itemIndex, column) {\n            ...\n        });\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1061,
            "description": "그리드의 row를 그룹화 한다",
            "itemtype": "method",
            "name": "setColumnRowGroupBy",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                },
                {
                    "name": "options",
                    "description": "옵션",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        GRID.setColumnRowGroupBy(me.gridView, \"field1\", {mergeMode: false});\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1082,
            "description": "그리드의 row를 merge 한다.",
            "itemtype": "method",
            "name": "setColumnRowMerge",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "fieldName",
                    "description": "필드명",
                    "type": "Array|string"
                },
                {
                    "name": "options.criteria",
                    "description": "옵션\n            criteria 옵션은 해당 사이트 참고\n            참조 사이트\n               column cell merge\n                    http://demo.realgrid.com/Demo/ColumnCellMerging\n                   criteria 조건들\n                   http://demo.realgrid.com/Demo/ExpressionConcept\n                   merge시 데이타내용상단으로\n                   http://demo.realgrid.com/Demo/ColumnBlanking#",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        GRID.setColumnRowMerge(me.gridView, \"field1\", {criteria: \"value\"});\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1117,
            "description": "그리드의 validator를 설정한다.\n<br>\n설정 한 후에 필요한 곳에서 GRID.invalidData()를 호출하여 유효성 검사를 할 수 있다",
            "itemtype": "method",
            "name": "setValidator",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "validator",
                    "description": "유효성 검사 설정",
                    "type": "Array"
                }
            ],
            "example": [
                "\n    setupGrid: function() {\n        var me = this;\n        var validator = [];\n        validator.push({\n            fieldName: \"field1\",\n            check: [\"required\", \"!space\", \"unique\"],\n            maxLength: 18\n        });\n        GRID.setValidator(me.gridView, validator);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1156,
            "description": "그리드의 데이터 유효성 검사",
            "itemtype": "method",
            "name": "invalidData",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true is invalid",
                "type": "Boolean"
            },
            "example": [
                "\n    onSaveList: function() {\n        var me = this;\n        if (GRID.invalidData(me.gridView)) {\n            return;\n        }\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1180,
            "description": "그리드 목록에서 신규/수정/삭제/체크 row의 목록을 반환한다",
            "itemtype": "method",
            "name": "allStateRows",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "outputFormat",
                    "description": "서버로 전송할 포맷 지정",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "DEF.styles.outputFormat"
                }
            ],
            "return": {
                "description": "<pre>\n{\n    created: [], // 신규\n    updated: [], // 수정\n    deleted: [], // 삭제\n    checked: []  // 체크\n}\n</pre>",
                "type": "Object"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        var rows = GRID.allStateRows(me.gridView);\n        me.$.saveInfo.body = {\n            insertData: rows.created,\n            updateData: rows.updated,\n            deleteData: rows.deleted\n        };\n        UT.save(me.$.saveInfo);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1217,
            "description": "그리드 목록에서 신규로 추가된 row의 목록을 반환한다",
            "itemtype": "method",
            "name": "createdStateRows",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "outputFormat",
                    "description": "서버로 전송할 포맷 지정",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "DEF.styles.outputFormat"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        var created = GRID.createdStateRows(me.gridView);\n        me.$.saveInfo.body = {\n            insertData: created\n        };\n        UT.save(me.$.saveInfo);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1250,
            "description": "그리드 목록에서 수정된 row의 목록을 반환한다",
            "itemtype": "method",
            "name": "updatedStateRows",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "outputFormat",
                    "description": "서버로 전송할 포맷 지정",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "DEF.styles.outputFormat"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        var updated = GRID.updatedStateRows(me.gridView);\n        me.$.saveInfo.body = {\n            updateData: updated\n        };\n        UT.save(me.$.saveInfo);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1283,
            "description": "그리드 목록에서 삭제된 row의 목록을 반환한다",
            "itemtype": "method",
            "name": "deletedStateRows",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "outputFormat",
                    "description": "서버로 전송할 포맷 지정",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "DEF.styles.outputFormat"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        var deleted = GRID.deletedStateRows(me.gridView);\n        me.$.saveInfo.body = {\n            deleteData: deleted\n        };\n        UT.save(me.$.saveInfo);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1316,
            "description": "그리드 목록의 checkbox에서 체크된 row의 목록을 반환한다",
            "itemtype": "method",
            "name": "checkedStateRows",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "outputFormat",
                    "description": "서버로 전송할 포맷 지정",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "DEF.styles.outputFormat"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        var checked = GRID.checkedStateRows(me.treeGridView);\n        for(var i=0, len = created.length; i < len; i++) {\n            ...\n        }\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1348,
            "description": "JSON checkedState Rows",
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1364,
            "description": "팝업에서 선택된 목록 반환\n<br>\n선택된 데이터가 없을 시 \"선택된 항목이 없습니다\" 메시지 출력됨",
            "itemtype": "method",
            "name": "selectedList",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "selectedCallback(selected,",
                    "description": "itemIndex)          체크박스에에 의해 선택된 정보를 반환할 콜백 함수",
                    "type": "Function"
                },
                {
                    "name": "selectedCallback(selected,",
                    "description": "itemIndex).selected 선택된 정보",
                    "type": "Object"
                },
                {
                    "name": "selectedCallback(selected,",
                    "description": "itemIndex).index    선택된 dataRow와 연결된 itemIndex",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "checkable",
                            "description": "선택된 정보를 반환한 후에 해당 데이터의 check 가능 여부 설정",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "clearChecked",
                            "description": "선택된 정보를 반환한 후에 해당 데이터의 check를 해제할 지 여부 설정",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        GRID.selectedList(me.gridView, function(selected, itemIndex) {\n            me.fire(\"addto-operorg\", selected);\n        });\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1411,
            "description": "그리드의 모든 데이터행을 리턴한다.\n<br>\n트리 그리드일 경우에는 트리구조가 없는 구조로 리턴한다.",
            "itemtype": "method",
            "name": "allRows",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "exceptDeleted",
                            "description": "삭제된 row 제외.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "datetimeFormat",
                            "description": "",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        var all = GRID.allRows(me.gridView);\n        for (var i = 0, len = all.length; i < len; i++) {\n            ...\n        }\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1477,
            "description": "그리드 row 추가",
            "itemtype": "method",
            "name": "addRow",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "rowData",
                    "description": "행 데이터 - rowData가 배열이이면 복수의 행, object이면 단일행 추가.",
                    "type": "Array|object"
                },
                {
                    "name": "position",
                    "description": "추가할 위치(top, bottom, before(현재row기준), after(현재row기준))",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"top\""
                },
                {
                    "name": "addedCallback",
                    "description": "row가 추가된 후에 호출될 콜백 함수",
                    "type": "Function",
                    "optional": true
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        GRID.addRow(me.gridView, {\n            field1: \"value1\",\n            field2: \"value2\"\n        });\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1556,
            "description": "트리 그리드의 현재 노드 추가",
            "itemtype": "method",
            "name": "addCurrentRow",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "addedCallback()",
                    "description": "row가 추가된 후에 호출될 콜백 함수",
                    "type": "Function",
                    "props": [
                        {
                            "name": "parentRow",
                            "description": "상위 row의 값. null 이면 root를 뜻함.",
                            "type": "Object"
                        },
                        {
                            "name": "setValue(value)",
                            "description": "추가된 row에 저장할 value를 할당하는 함수",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "value",
                                    "description": "추가된 row에 저장할 value. value가 배열이면 복수의 행, object이면 단일행 추가.",
                                    "type": "Array|object"
                                }
                            ]
                        }
                    ]
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        GRID.addCurrentRow(me.gridView, function(parentRow, setValue) {\n            setValue({\n                field1: parentRow.field1,\n                field2: \"value2\"\n            });\n        });\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1601,
            "description": "트리 그리드의 하위 노드 추가",
            "itemtype": "method",
            "name": "addChildRow",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "addedCallback()",
                    "description": "row가 추가된 후에 호출될 콜백 함수",
                    "type": "Function",
                    "props": [
                        {
                            "name": "parentRow",
                            "description": "상위 row의 값",
                            "type": "Object"
                        },
                        {
                            "name": "setValue(value)",
                            "description": "추가된 row에 저장할 value를 할당하는 함수.",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "value",
                                    "description": "추가된 row에 저장할 value. value가 배열이면 복수의 행, object이면 단일행 추가.",
                                    "type": "Array|object"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "addableMode",
                            "description": "추가 옵션\n<pre>\n\"strict\" - 신규행의 하위 노드는 추가하지 못한다. \"신규 노드에는 하위노드를 추가할 수 없습니다\" 메시지 출력됨.\n\"always\" - 제한 없이 항상 추가 가능\n</pre>",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"strict\""
                        }
                    ]
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        GRID.addChildRow(me.gridView, function(parentRow, setValue) {\n            setValue({\n                field1: parentRow.field1,\n                field2: \"value2\"\n            });\n        });\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1664,
            "description": "그리드의 목록데이터 지우기",
            "itemtype": "method",
            "name": "clearRows",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        GRID.clearRows(me.gridView);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1680,
            "description": "그리드의 목록 로드 - 그리드에 목록데이터 셋팅",
            "itemtype": "method",
            "name": "setRows",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "rows",
                    "description": "목록데이터",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "데이터 셋팅 완료 후 호출될 콜백 함수",
                    "type": "Function",
                    "optional": true
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        GRID.setRows(me.gridView, rows);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1704,
            "description": "트리 그리드의 목록 로드 - 그리드에 목록데이터 셋팅",
            "itemtype": "method",
            "name": "setTreeRows",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "rows",
                    "description": "목록데이터",
                    "type": "Array"
                },
                {
                    "name": "treeFieldName",
                    "description": "트리가 적용될 필드명",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "데이터 셋팅 완료 후 호출될 콜백 함수",
                    "type": "Function",
                    "optional": true
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function(e, res) {\n        var me = this;\n        ...\n        GRID.setTreeRows(me.gridView, rows, \"tree\", function() {\n            ...\n        });\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1731,
            "description": "그리드의 목록 조회 요청",
            "itemtype": "method",
            "name": "findList",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "ajax",
                    "description": "sc-ajax 객체",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        GRID.findList(me.gridView, me.$.findList);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1747,
            "description": "그리드의 목록 데이터 저장\n<br>\n\"저장 하시겠습니까?\" 또는 \"변경된 내용이 없습니다\" 메시지 출력",
            "itemtype": "method",
            "name": "saveList",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "callback()",
                    "description": "\"저장 하시겠습니까?\" confirm 에서 ok 가 클릭된 후 호출될 콜백 함수",
                    "type": "Function",
                    "props": [
                        {
                            "name": "created",
                            "description": "신규 추가된 데이터",
                            "type": "Array"
                        },
                        {
                            "name": "updated",
                            "description": "수정된 데이터",
                            "type": "Array"
                        },
                        {
                            "name": "request(ajax)",
                            "description": "서버로 저장을 요청할 콜백 함수",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "ajax",
                                    "description": "sc-ajax 객체",
                                    "type": "Object"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "optons",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "force",
                            "description": "true 이면 변경된 내용이 없어도 confirm 으로 수행된다.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "outputFormat",
                            "description": "서버로 전송할 포맷 지정",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "DEF.styles.outputFormat"
                        }
                    ]
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        GRID.saveList(me.gridView, function(created, updated, request) {\n            me.$.saveList.body = {\n                insertData: created,\n                updateData: updated\n            };\n            request(me.$.saveList);\n        });\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1791,
            "description": "그리드의 row 삭제\n<br>\n\"삭제 하시겠습니까?\" 또는 \"수정중인 데이터가 있습니다. 삭제 하시겠습니까?\" 또는 \"선택된 항목이 없습니다\" 메시지 출력",
            "itemtype": "method",
            "name": "deleteList",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "callback()",
                    "description": "\"삭제 하시겠습니까?\" confirm 에서 ok 가 클릭된 후 호출될 콜백 함수",
                    "type": "Function",
                    "props": [
                        {
                            "name": "deleted",
                            "description": "삭제된 데이터",
                            "type": "Array"
                        },
                        {
                            "name": "request(ajax)",
                            "description": "서버로 삭제를 요청할 콜백 함수",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "ajax",
                                    "description": "sc-ajax 객체",
                                    "type": "Object"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "optons",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "message",
                            "description": "\"삭제 하시겠습니까?\" 와 다른 메시지를 출력할 경우 지정",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        GRID.deleteList(me.gridView, function(deleted, request) {\n            if (deleted.length > 0) {\n                me.$.deleteList.body = {\n                   deleteMenus: deleted\n                }\n                request(me.$.deleteList);\n            }\n        });\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1860,
            "description": "그리드의 목록 로드 완료 - 그리드에 목록데이터 셋팅",
            "itemtype": "method",
            "name": "completeFindList",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "rows",
                    "description": "목록데이터",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "데이터 셋팅 완료 후 호출될 콜백 함수",
                    "type": "Function",
                    "optional": true
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function(e, res) {\n        var me = this;\n        GRID.completeFindList(me.gridView, res.response);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1878,
            "description": "트리 그리드의 목록 로드 완료 - 그리드에 목록데이터 셋팅",
            "itemtype": "method",
            "name": "completeTreeFindList",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "rows",
                    "description": "목록데이터",
                    "type": "Array"
                },
                {
                    "name": "treeFieldName",
                    "description": "트리가 적용될 필드명",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "데이터 셋팅 완료 후 호출될 콜백 함수",
                    "type": "Function",
                    "optional": true
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function(e, res) {\n        var me = this;\n        GRID.completeTreeFindList(me.gridView, res.response, \"tree\", function() {\n            ...\n        });\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1899,
            "description": "그리드의 목록 데이터 저장 완료\n<br>\n\"요청을 완료 하였습니다\" 또는 \"오류가 발생하였습니다.\\n관리자에게 문의하세요\" 메시지 출력",
            "itemtype": "method",
            "name": "completeSaveList",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "result",
                    "description": "서버에서의 처리 결과",
                    "type": "Object"
                },
                {
                    "name": "successCallback",
                    "description": "성공시 호출될 콜백 함수",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "failureCallback",
                    "description": "실패시 호출될 콜백 함수",
                    "type": "Function",
                    "optional": true
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function(e, res) {\n        var me = this;\n        GRID.completeSaveList(me.gridView, res.response, function() {\n            ...\n        });\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1932,
            "description": "그리드의 목록 데이터 삭제 완료\n<br>\n\"요청을 완료 하였습니다\" 또는 \"오류가 발생하였습니다.\\n관리자에게 문의하세요\" 메시지 출력",
            "itemtype": "method",
            "name": "completeDeleteList",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "result",
                    "description": "서버에서의 처리 결과",
                    "type": "Object"
                },
                {
                    "name": "successCallback",
                    "description": "성공시 호출될 콜백 함수",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "failureCallback",
                    "description": "실패시 호출될 콜백 함수",
                    "type": "Function",
                    "optional": true
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        GRID.completeDeleteList(me.gridView, res.response, function() {\n            ...\n        });\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 1965,
            "description": "트리 그리드의 체크 cell 이 클릭 되었을때 이벤트",
            "itemtype": "method",
            "name": "onCheckCellClicked",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "cell",
                    "description": "셀 정보",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "children",
                            "description": "true: 자식 노드들도 동일한 check 값을 적용",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "ancestor",
                            "description": "true: 조상 노드들도 동일한 check 값을 적용. uncheck시에는 클릭된 cell 과 동일한 레벨에 check 된 것이 없어야 부모 노드가 uncheck 된다",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "values",
                            "description": "true 값, false 값 정의",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "trueValue",
                                    "description": "true 값",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"Y\""
                                },
                                {
                                    "name": "falseValue",
                                    "description": "false 값",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"N\""
                                }
                            ]
                        }
                    ]
                }
            ],
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        me.gridView.onDataCellClicked = function(grid, cell) {\n            if(cell.fieldName == \"field1\") {\n                GRID.onCheckCellClicked(grid, cell, {children: true, ancestor: true});\n            }\n        }\n\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 2048,
            "description": "그리드의 주어진 row의 하위 모든 leaf 노드의 rowId 만 리턴한다.",
            "itemtype": "method",
            "name": "getTreeLeafRowIds",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "rowId",
                    "description": "데이터행 index",
                    "type": "Number"
                }
            ],
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        var leafs = GRID.getTreeLeafRowIds(me.gridView, -1); // -1 이면 전체\n        me.gridView.setCellStyles(leafs, \"field1\", DEF.styles.actionable.id); // leaf 노드만 actionable\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 2073,
            "description": "그리드의 체크된 row를 위로 이동시킨다",
            "itemtype": "method",
            "name": "moveUp",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "이동 후 호출될 콜백함수",
                    "type": "Function",
                    "optional": true
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        GRID.moveUp(me.gridView, function() {\n            ...\n        });\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 2107,
            "description": "그리드의 체크된 row를 아래로 이동시킨다",
            "itemtype": "method",
            "name": "moveDown",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "이동 후 호출될 콜백함수",
                    "type": "Function",
                    "optional": true
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        GRID.moveDown(me.gridView, function() {\n            ...\n        });\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 2142,
            "description": "그리드의 checkBar 헤더 visible 설정",
            "itemtype": "method",
            "name": "visibleCheckBarHeader",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "visible",
                    "description": "true is visible",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        GRID.visibleCheckBarHeader(me.gridView, false);\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 2160,
            "description": "그리드의 소팅 기능 여부 설정",
            "itemtype": "method",
            "name": "sortable",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "sortable",
                    "description": "true is sortable",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        GRID.sortable(me.gridView, false); // 소팅기능 없음\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\grid.js",
            "line": 2178,
            "description": "그리드의 읽기 전용 설정",
            "itemtype": "method",
            "name": "readOnly",
            "params": [
                {
                    "name": "gridView",
                    "description": "grid",
                    "type": "Object"
                },
                {
                    "name": "readonly",
                    "description": "true is readonly",
                    "type": "Boolean"
                },
                {
                    "name": "exFieldName",
                    "description": "제외 필드명",
                    "type": "Array|string"
                }
            ],
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        if (...) {\n            GRID.readOnly(me.gridView, true);\n        } else {\n            GRID.readOnly(me.gridView, false);\n        }\n    }"
            ],
            "class": "GRID"
        },
        {
            "file": "js\\i18n.js",
            "line": 7,
            "description": "다국어 처리 instance",
            "class": "I18N"
        },
        {
            "file": "js\\i18n.js",
            "line": 12,
            "description": "다국어 변환",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "I18N"
        },
        {
            "file": "js\\upload.js",
            "line": 7,
            "description": "생성된 모든 upload instances",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "instances",
            "type": "object",
            "class": "UPLOAD"
        },
        {
            "file": "js\\upload.js",
            "line": 16,
            "description": "instance 얻기",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getInstance",
            "params": [
                {
                    "name": "uploadId",
                    "description": "uploadId",
                    "type": "String"
                }
            ],
            "return": {
                "description": "upload instance",
                "type": "Object"
            },
            "class": "UPLOAD"
        },
        {
            "file": "js\\upload.js",
            "line": 28,
            "description": "instance 저장",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setInstance",
            "params": [
                {
                    "name": "upload",
                    "description": "instance",
                    "type": "Object"
                }
            ],
            "class": "UPLOAD"
        },
        {
            "file": "js\\upload.js",
            "line": 39,
            "description": "업로더 생성",
            "itemtype": "method",
            "name": "createUpload",
            "params": [
                {
                    "name": "container",
                    "description": "container",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "업로더 생성 옵션",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "width",
                            "description": "가로크기",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"100%\""
                        },
                        {
                            "name": "height",
                            "description": "세로크기",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"200px\""
                        },
                        {
                            "name": "editable",
                            "description": "편집모드 여부",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "maxTotalFileCount",
                            "description": "최대 파일 개수. 0: 제한없음.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "maxTotalFileSize",
                            "description": "업로드 될 파일의 총 용량. 0: 제한없음. 단위 - B(byte), KB(kilobyte), MB(megabyte), GB(gigabyte)",
                            "type": "String",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "views",
                            "description": "\"list\":목록형 보기, \"thumbs\":썸네일 보기",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"list\""
                        },
                        {
                            "name": "showMoveButtons",
                            "description": "true:이동버튼 보이기",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "extensionAllowOrLimit",
                            "description": "확장자 제한/허용. 0: 제한, 1:허용",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "extension",
                            "description": "제한 또는 허용할 파일 확장자를 의미합니다.(확장자가 여러개일 경우 콤마(,)로 구분하여 설정합니다)",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Promise",
                "type": "Object"
            },
            "example": [
                "\n    initUpload: function() {\n        var me = this;\n        var options = {\n            editable: me.get(\"editable\") === true || me.get(\"editable\") === \"true\",\n            views: me.get(\"views\"),\n            maxTotalFileCount: me.get(\"maxTotalFileCount\"),\n            maxTotalFileSize: me.get(\"maxTotalFileSize\")\n        };\n        return UPLOAD.createUpload(me.$.uploadPanel, options);\n    }"
            ],
            "class": "UPLOAD"
        },
        {
            "file": "js\\upload.js",
            "line": 118,
            "description": "파일 로드",
            "itemtype": "method",
            "name": "onLoadFiles",
            "params": [
                {
                    "name": "uploadId",
                    "description": "uploadId",
                    "type": "String"
                },
                {
                    "name": "grpCdValue",
                    "description": "첨부파일 그룹 코드",
                    "type": "String"
                }
            ],
            "example": [
                "\n    changedValue: function(value) {\n        var me = this;\n        if (me.uploadId && typeof value === \"string\") {\n            UPLOAD.onLoadFiles(me.uploadId, value);\n        }\n    }"
            ],
            "class": "UPLOAD"
        },
        {
            "file": "js\\upload.js",
            "line": 147,
            "description": "파일목록 지우기",
            "itemtype": "method",
            "name": "clearFiles",
            "params": [
                {
                    "name": "uploadId",
                    "description": "uploadId",
                    "type": "String"
                }
            ],
            "example": [
                "\n    onLoadFiles: function(uploadId, grpCdValue) {\n       UPLOAD.clearFiles(uploadId);\n       ...\n    }"
            ],
            "class": "UPLOAD"
        },
        {
            "file": "js\\upload.js",
            "line": 162,
            "description": "업로드 시작. 복수개의 업로드일 경우 순서대로 전송 호출",
            "itemtype": "method",
            "name": "onUpload",
            "params": [
                {
                    "name": "uploadIds",
                    "description": "업로드 id",
                    "type": "Array"
                },
                {
                    "name": "completeCallback",
                    "description": "업로드가 모두 완료 된 후 호출되는 콜백 함수",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    save: function(ajax, options) {\n        ...\n        if (attachUploadIds && attachGrpCdNames) {\n            ...\n            UPLOAD.onUpload(attachUploadIds, function(files) {\n                ...\n            });\n        }\n    }"
            ],
            "class": "UPLOAD"
        },
        {
            "file": "js\\upload.js",
            "line": 230,
            "description": "편집모드 설정",
            "itemtype": "method",
            "name": "setEditable",
            "params": [
                {
                    "name": "uploadId",
                    "description": "uploadId",
                    "type": "String"
                },
                {
                    "name": "editable",
                    "description": "editable",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n    changedEditable: function(editable) {\n        var me = this;\n        if (me.uploadId) {\n            UPLOAD.setEditable(me.uploadId, editable);\n        }\n    }"
            ],
            "class": "UPLOAD"
        },
        {
            "file": "js\\upload.js",
            "line": 248,
            "description": "옵션 설정",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "uploadId",
                    "description": "uploadId",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "editable",
                            "description": "편집모드 설정",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "maxTotalFileCount",
                            "description": "최대 파일 개수. 0: 제한없음.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "maxTotalFileSize",
                            "description": "업로드 될 파일의 총 용량. 0: 제한없음. 단위 - B(byte), KB(kilobyte), MB(megabyte), GB(gigabyte)",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "views",
                            "description": "\"list\":목록형 보기, \"thumbs\":썸네일 보기",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "extensionAllowOrLimit",
                            "description": "확장자 제한/허용. 0: 제한, 1:허용",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "extension",
                            "description": "제한 또는 허용할 파일 확장자를 의미합니다.(확장자가 여러개일 경우 콤마(,)로 구분하여 설정합니다)",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n    changedMaxTotalFileCount: function(count) {\n        var me = this;\n        if (me.uploadId && typeof count === \"number\") {\n            UPLOAD.setOptions(me.uploadId, {maxTotalFileCount: count});\n        }\n    }"
            ],
            "class": "UPLOAD"
        },
        {
            "file": "js\\upload.js",
            "line": 290,
            "description": "변경된 파일정보가 있는지 확인",
            "itemtype": "method",
            "name": "isDirty",
            "params": [
                {
                    "name": "uploadId",
                    "description": "uploadId",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true is dirty",
                "type": "Boolean"
            },
            "example": [
                "\n    onSave: function() {\n        var me = this;\n        ...\n        if (UPLOAD.isDirty(uploadId) === false) {\n            UT.alert(MSG[\"N1700\"]); // 변경된 내용이 없습니다\n            return;\n        }\n        ...\n    }"
            ],
            "class": "UPLOAD"
        },
        {
            "file": "js\\upload.js",
            "line": 313,
            "itemtype": "method",
            "name": "getTotalFileCount",
            "params": [
                {
                    "name": "uploadId",
                    "description": "uploadId",
                    "type": "String"
                }
            ],
            "return": {
                "description": "total file count",
                "type": "Number"
            },
            "example": [
                "\n    onSave: function() {\n        var me = this;\n        ...\n        if (UPLOAD.getTotalFileCount(uploadId) === 0) {\n            UT.alert(\"파일을 선택하십시오\");\n            return;\n        }\n        ...\n    }"
            ],
            "class": "UPLOAD"
        },
        {
            "file": "js\\util.js",
            "line": 8,
            "description": "권한에 따른 element 노드 삭제",
            "itemtype": "method",
            "name": "checkAuth",
            "params": [
                {
                    "name": "element",
                    "description": "element",
                    "type": "Object"
                },
                {
                    "name": "selector",
                    "description": "삭제할 css selector",
                    "type": "String"
                },
                {
                    "name": "funcCd",
                    "description": "기능 코드",
                    "type": "String"
                }
            ],
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        UT.cehckAuth(me, \"auth-r', DEF.READ);\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 39,
            "description": "화면 생성 및 상위노드에 추가",
            "itemtype": "method",
            "name": "createModule",
            "params": [
                {
                    "name": "parentNode",
                    "description": "상위 노드",
                    "type": "Object"
                },
                {
                    "name": "moduleTagName",
                    "description": "모듈 태그 명",
                    "type": "String"
                },
                {
                    "name": "cssName",
                    "description": "css class 명",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "authList",
                    "description": "권한",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        var detail = UT.createModule(me.$.pages, \"es-module\", \"vbox\");\n        detail.addEventListener(\"attached\", function() {\n            ...\n        });\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 75,
            "description": "상위 노드에서 화면 삭제",
            "itemtype": "method",
            "name": "removeModule",
            "params": [
                {
                    "name": "parentNode",
                    "description": "삭제할 객체의 상위 객체",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "이벤트 객체",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    someFunction: function(e) {\n        var me = this;\n        UT.removeModule(me.$.pages, e);\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 91,
            "description": "alert dialog",
            "itemtype": "method",
            "name": "alert",
            "params": [
                {
                    "name": "message",
                    "description": "출력할 메시지",
                    "type": "String"
                },
                {
                    "name": "okCallback",
                    "description": "ok 버튼 클릭 후 콜백 함수",
                    "type": "Function",
                    "optional": true
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        UT.alert(\"Hello World!\");\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 112,
            "description": "confirm dialog",
            "itemtype": "method",
            "name": "confirm",
            "params": [
                {
                    "name": "message",
                    "description": "출력할 메시지",
                    "type": "String"
                },
                {
                    "name": "yesCallback",
                    "description": "ok 버튼 클릭 후 콜백 함수",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "noCallback",
                    "description": "no 버튼 클릭 후 콜백 함수",
                    "type": "Function",
                    "optional": true
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        UT.confirm(\"Hello World!\", function() {\n            // yes\n            ...\n        }, function() {\n            // no\n            ...\n        });\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 146,
            "description": "일반 데이터의 유효성 검사",
            "itemtype": "method",
            "name": "invalidData",
            "params": [
                {
                    "name": "data",
                    "description": "검사할 변수들이 포함된 객체",
                    "type": "Object"
                },
                {
                    "name": "validator",
                    "description": "유효성 검사 항목",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "true - 유효하지 않음",
                "type": "Boolean"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        if (UT.invalidData(me.get(\"findList.param\"))) {\n            return;\n        }\n        ...\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 195,
            "description": "ajax 요청",
            "itemtype": "method",
            "name": "request",
            "params": [
                {
                    "name": "ajax",
                    "description": "sc-ajax 객체",
                    "type": "Object"
                },
                {
                    "name": "responseCallback(res)",
                    "description": "삭제 완료 후 콜백 함수",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "res",
                            "description": "처리 결과 정보\n<pre>\n&lt;sc-ajax url=\"url\" on-response=\"func\">&lt;/sc_ajax>\non-response 에 함수를 지정하지 않은 경우 : responseCallback 을 정의하여 response를 받을 수 있다\n</pre>",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        UT.request(me.$.findInfo);\n    }\n    someFunction: function() {\n        var me = this;\n        UT.request(me.$.findInfo, function(e, res) {\n            ...\n        });\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 234,
            "description": "save 요청 - \"저장하시겠습니까?\" 메시지 출력",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "ajax",
                    "description": "sc-ajax 객체",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "message",
                            "description": "\"저장하시겠습니까?\" 와 다른 메시지를 출력하는 경우.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "onResponse(res)",
                            "description": "저장 완료 후 콜백 함수",
                            "type": "Function",
                            "optional": true,
                            "props": [
                                {
                                    "name": "res",
                                    "description": "결과 정보\n<pre>\n&lt;sc-ajax url=\"url\" on-response=\"func\">&lt;/sc_ajax>\non-response 에 함수를 지정한 경우        : 해당 함수에서 UT.completeSave를 호출해줘야 한다.\non-response 에 함수를 지정하지 않은 경우 : options.onResponse 을 정의하여 response를 받을 수 있다\n</pre>",
                                    "type": "Object"
                                }
                            ]
                        },
                        {
                            "name": "confirm",
                            "description": "UT.confirm 수행 여부",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "cancelCallback",
                            "description": "confrim 에서 취소 했을 때 콜백 함수",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "attachGrpCdNames",
                            "description": "첨부파일 처리시. ajax.body 내에 저장될 grp_cd 필드",
                            "type": "String|array",
                            "optional": true
                        },
                        {
                            "name": "attachUploadIds",
                            "description": "첨부파일 처리시. 업로드 Id",
                            "type": "String|array",
                            "optional": true
                        }
                    ]
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        me.$.saveInfo.body = {\n            attachGrpCdNames: attNo,                // 첨부파일\n            attachUploadIds: me.$.upload.getId(),   // 첨부파일\n            message: message,\n            cancelCallback: function() {\n                ...\n            }\n        };\n        UT.save(me.$.saveInfo);\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 371,
            "description": "삭제 요청 - \"삭제하시겠습니까?\" 메시지 출력",
            "itemtype": "method",
            "name": "onDelete",
            "params": [
                {
                    "name": "ajax",
                    "description": "sc-ajax 객체",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "message",
                            "description": "\"삭제하시겠습니까?\" 와 다른 메시지를 출력하는 경우.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "onResponse(res)",
                            "description": "삭제 완료 후 콜백 함수",
                            "type": "Function",
                            "optional": true,
                            "props": [
                                {
                                    "name": "res",
                                    "description": "처리 결과 정보\n<pre>\n&lt;sc-ajax url=\"url\" on-response=\"func\">&lt;/sc_ajax>\non-response 에 함수를 지정한 경우        : 해당 함수에서 UT.completeDelete를 호출해줘야 한다.\non-response 에 함수를 지정하지 않은 경우 : options.onResponse 을 정의하여 response를 받을 수 있다\n</pre>",
                                    "type": "Object"
                                }
                            ]
                        }
                    ]
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        UT.onDelete(me.$.deleteInfo);\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 400,
            "description": "UT.request 에 대한 요청 완료",
            "itemtype": "method",
            "name": "completeRequest",
            "params": [
                {
                    "name": "options",
                    "description": "옵션",
                    "type": "Object",
                    "props": [
                        {
                            "name": "result",
                            "description": "서버에서의 처리 결과 result.result_status 가 S 이면 성공, 나머지는 실패",
                            "type": "Object"
                        },
                        {
                            "name": "success",
                            "description": "성공시 처리",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "message",
                                    "description": "성공시 메시지",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "callback",
                                    "description": "성공시 호출될 콜백 함수",
                                    "type": "Function",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "failure",
                            "description": "실패시 처리",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "message",
                                    "description": "실패시 메시지",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "callback",
                                    "description": "실패시 호출될 콜백 함수",
                                    "type": "Function",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function(result) {\n        var me = this;\n        UT.completeRequest({\n            result: result,\n            success: {\n                message: I18N.translate(MSG[\"N1500\"]),\n                callback: function() {\n                    ...\n                }\n            },\n            failure: {\n                message: UT.failureMessage(result),\n                callback: function() {\n                    ...\n                }\n            }\n        });\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 464,
            "description": "UT.save 에 대한 요청 완료",
            "itemtype": "method",
            "name": "completeSave",
            "params": [
                {
                    "name": "result",
                    "description": "서버에서의 처리 결과",
                    "type": "Object"
                },
                {
                    "name": "successCallback",
                    "description": "처리결과가 성공이었을 때 콜백 함수",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "failureCallback",
                    "description": "처리결과가 실패였을 때 콜백 함수",
                    "type": "Function",
                    "optional": true
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function(e, res) {\n        var me = this;\n        UT.completeSave(res.response, function() {\n            ...\n        });\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 494,
            "description": "UT.onDelete 에 대한 요청 완료",
            "itemtype": "method",
            "name": "completeDelete",
            "params": [
                {
                    "name": "result",
                    "description": "서버에서의 처리 결과",
                    "type": "Object"
                },
                {
                    "name": "successCallback",
                    "description": "처리결과가 성공이었을 때 콜백 함수",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "failureCallback",
                    "description": "처리결과가 실패였을 때 콜백 함수",
                    "type": "Function",
                    "optional": true
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function(e, res) {\n        var me = this;\n        UT.completeDelete(res.response, function() {\n            ...\n        });\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 524,
            "description": "서버로의 요청 결과에 대한 실패 메시지",
            "itemtype": "method",
            "name": "failureMessage",
            "params": [
                {
                    "name": "result",
                    "description": "서버에서의 처리 결과",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        UT.completeRequest({\n            result: result,\n            ...\n            failure: {\n                message: UT.failureMessage(result)\n            }\n        });\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 555,
            "description": "clone object",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "object",
                    "description": "복사할 대상 object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "new object",
                "type": "Object"
            },
            "example": [
                "\n    someFunction: function(param) {\n        var me = this;\n        me.set(\"findInfo.param\", UT.copy(param));\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 588,
            "description": "sc-ajax 실행",
            "itemtype": "method",
            "name": "ajax",
            "params": [
                {
                    "name": "url",
                    "description": "URL",
                    "type": "String"
                },
                {
                    "name": "param",
                    "description": "서버로 전송할 파라미터",
                    "type": "Object"
                },
                {
                    "name": "completeCallback(res)",
                    "description": "실행 완료 후 콜백 함수",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "res",
                            "description": "서버로 부터 전송되는 실행 결과 정보",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "element",
                    "description": "ajax 가 포함될 element (메뉴 권한 체크를 해야하는 경우 필수)",
                    "type": "Object",
                    "optional": true
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        UT.ajax(\"saveList.do\", param, function() {\n            ...\n        }, me);\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 622,
            "description": "uuid 만들기",
            "itemtype": "method",
            "name": "generateUUID",
            "return": {
                "description": "uuid",
                "type": "String"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        var uuid = UT.generateUUID();\n        ...\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 643,
            "description": "팝업\n<br>\n팝업의 close 이벤트는 기본적으로 설정된다.",
            "itemtype": "method",
            "name": "popup",
            "params": [
                {
                    "name": "popupTagName",
                    "description": "팝업으로 사용할 tag name",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "element",
                    "type": "Object"
                },
                {
                    "name": "width",
                    "description": "가로크기",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "세로크기",
                    "type": "Number"
                },
                {
                    "name": "events",
                    "description": "팝업에서 발생되는 event의 리스너 목록,",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "팝업 설정 옵션",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "modal",
                            "description": "모달 여부",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "maximizable",
                            "description": "최대화 여부",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "draggable",
                            "description": "이동 여부",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "resizable",
                            "description": "리사이징 여부",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "collapsible",
                            "description": "접기/펴기 여부",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        UT.popup(\"ep-approval\", me, 900, 800, {\n            \"attached\": function(popup, e) {\n                popup.getContent().setParam({\n                    app_id: param.app_id || \"\",\n                    aprv_id: param.aprv_id || \"\",\n                    aprv_typcd: param.aprv_typcd || \"\"\n                });\n            },\n            \"saved-approval\": function(popup, e) {\n                if (UT.isFunction(savedCallback)) {\n                    savedCallback.call(this, e.detail);\n                }\n            }\n        }, {maximizable: true});\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 716,
            "description": "팝업\n<br>\nscpopup에 iframe을 이용하여 jsp, html등 파일을 호출한다.\n호출된 jsp에서 팝업창을 제어할 수 있도록 closePopup 펑션 추가",
            "itemtype": "method",
            "name": "popupJsp",
            "params": [
                {
                    "name": "url",
                    "description": "호출할 파일 url",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "element",
                    "type": "Object"
                },
                {
                    "name": "width",
                    "description": "가로크기",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "세로크기",
                    "type": "Number"
                },
                {
                    "name": "events",
                    "description": "팝업에서 발생되는 event의 리스너 목록,",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "팝업 설정 옵션",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "modal",
                            "description": "모달 여부",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "maximizable",
                            "description": "최대화 여부",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "draggable",
                            "description": "이동 여부",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "resizable",
                            "description": "리사이징 여부",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "collapsible",
                            "description": "접기/펴기 여부",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        UT.popupJsp(\"test.jsp\", me, 900, 800, {maximizable: true});\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 789,
            "description": "결재 팝업",
            "itemtype": "method",
            "name": "popupApproval",
            "params": [
                {
                    "name": "element",
                    "description": "element",
                    "type": "Object"
                },
                {
                    "name": "param",
                    "description": "결재 팝업으로 전달할 파라미터",
                    "type": "Object",
                    "props": [
                        {
                            "name": "app_id",
                            "description": "해당 모듈의 APP 아이디(신규작성시)",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "aprv_typcd",
                            "description": "결재 유형코드(신규작성시)",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "aprv_id",
                            "description": "결재 아이디",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "savedCallback(stsCd)",
                    "description": "결재 작성시(resultView=false) 결재정보가 저장된 후 콜백 함수",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "stsCd",
                            "description": "결재상태코드",
                            "type": "String"
                        }
                    ]
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        UT.popupApproval(me, {aprv_id: data.aprv_id}, function() {\n            ...\n        });\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 833,
            "description": "첨부파일 업로드 팝업\n<br>\n콜백함수로부터 첨부파일 그룹코드와 파일 개수가 전달된다.",
            "itemtype": "method",
            "name": "popupAttach",
            "params": [
                {
                    "name": "element",
                    "description": "element",
                    "type": "Object"
                },
                {
                    "name": "grpCd",
                    "description": "첨부파일 그룹코드",
                    "type": "String"
                },
                {
                    "name": "savedCallback(result)",
                    "description": "파일 저장 후 콜백 함수",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "result",
                            "description": "콜백함수로부터 전달 되는 파라미터 - (예) {grp_cd: \"xxx\", file_count: 2}",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "grp_cd",
                                    "description": "첨부파일 그룹코드",
                                    "type": "String"
                                },
                                {
                                    "name": "file_count",
                                    "description": "업로드된 파일 총 수",
                                    "type": "Number"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "업로더 설정 옵션",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "maxTotalFileCount",
                            "description": "객최대 파일 개수, 0 : 제한없음.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "maxTotalFileSize",
                            "description": "업로드 될 파일의 총 용량. 단위 - B(byte), KB(kilobyte), MB(megabyte), GB(gigabyte)",
                            "type": "String",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        me.gridView.onDataCellClicked = function(grid, cell) {\n            var fieldName = cell.fieldName;\n            if(fieldName == \"field1\"){\n                UT.popupAttach(me, me.data.field2, function(result) {\n                    grid.setValues(cell.itemIndex, {\n                        field2: result.grp_cd,\n                        field1: result.file_count\n                    }, true);\n                });\n            }\n        };\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 883,
            "description": "객체 선택 팝업",
            "itemtype": "method",
            "name": "popupSelectObject",
            "params": [
                {
                    "name": "popupTagName",
                    "description": "팝업으로 사용할 tag name",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "element",
                    "type": "Object"
                },
                {
                    "name": "selectedCallback(selected)",
                    "description": "선택된 데이터를 리턴하는 콜백 함수",
                    "type": "Function",
                    "props": [
                        {
                            "name": "selected",
                            "description": "선택된 데이터",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "singleSelect",
                            "description": "객체의 단일 선택 여부",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "selectAfterClose",
                            "description": "검색 결과가 복수 일 경우 팝업에서 선택 후 창 닫기",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "width",
                            "description": "팝업 가로 크기",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "650"
                        },
                        {
                            "name": "height",
                            "description": "팝업 세로 크기",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "500"
                        },
                        {
                            "name": "dataRows",
                            "description": "팝업의 그리드에 전달할 row 데이터",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "rows"
                        },
                        {
                            "name": "defaultParam",
                            "description": "팝업 검색 파라미터",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "param"
                        }
                    ]
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        UT.popupSelectObject(\"ep-module\", me, function(selected) {\n            ...\n            me.onAdd(selected);\n        });\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 932,
            "description": "자동완성 객체 검색\n**ep-user-list**: 사용자 검색, **ep-job-list**:구매그룹검색, **ep-dept-list**: 부서 검색",
            "itemtype": "method",
            "name": "autoCompleteObject",
            "params": [
                {
                    "name": "popupTagName",
                    "description": "팝업으로 사용할 tag name",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "element",
                    "type": "Object"
                },
                {
                    "name": "param",
                    "description": "데이터 검색 파라미터",
                    "type": "Object"
                },
                {
                    "name": "selectedCallback(selected)",
                    "description": "검색된(선택된) 데이터를 리턴하는 콜백 함수",
                    "type": "Function",
                    "props": [
                        {
                            "name": "selected",
                            "description": "검색된(선택된) 데이터",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "singleSelect",
                            "description": "객체의 단일 선택 여부",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "selectAfterClose",
                            "description": "검색 결과가 복수 일 경우 팝업에서 선택 후 창 닫기",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "width",
                            "description": "팝업 가로 크기",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "650"
                        },
                        {
                            "name": "height",
                            "description": "팝업 세로 크기",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "500"
                        }
                    ]
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        UT.autoCompleteObject(\"ep-module\", me, {\"usr_nm\": me.value}, function(result) {\n            ...\n        });\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 979,
            "description": "date를 format의 형태로 출력한다.",
            "itemtype": "method",
            "name": "formatDate",
            "params": [
                {
                    "name": "date",
                    "description": "날짜 객체 | 날짜의 time값",
                    "type": "Date|number"
                },
                {
                    "name": "format",
                    "description": "변환할 format",
                    "type": "String",
                    "optional": true,
                    "optdefault": "DEF.styles.formatDate.datetimeFormat"
                }
            ],
            "return": {
                "description": "변환된 문자열",
                "type": "String"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        UT.formatDate(new Date(), \"yyyy/MM/dd\"); // 2016/04/20\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1034,
            "description": "string에 values를 replace 한다",
            "itemtype": "method",
            "name": "formatString",
            "params": [
                {
                    "name": "string",
                    "description": "대상 문자열",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "바꿀 문자열",
                    "type": "String|array"
                }
            ],
            "return": {
                "description": "replace 된 문자열",
                "type": "String"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        UT.formatString(\"{0} / {1}\", \"a\", \"b\");                       // a / b\n        UT.formatString(\"{0} / {1}\", [\"a\", \"b\"]);                     // a / b\n        UT.formatString(\"{name} / {value}\", {name: \"a\", value: \"b\"}); // a / b\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1056,
            "description": "코드 로드\nsc-service-group 요청 및 요청완료를 promise로 반환한다.",
            "itemtype": "method",
            "name": "promiseCodes",
            "params": [
                {
                    "name": "codes",
                    "description": "sc-service-group",
                    "type": "Object"
                },
                {
                    "name": "loadedCallback",
                    "description": "sc-service-group이 모두 load 된 후 콜백 함수",
                    "type": "Function",
                    "optional": true
                }
            ],
            "async": 1,
            "deprecated": true,
            "deprecationMessage": "Use 'UT.promise' instead.",
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1078,
            "description": "promise 처리",
            "itemtype": "method",
            "name": "promise",
            "params": [
                {
                    "name": "elements",
                    "description": "sc-service-group 과 같이 service() 함수를 가지는 element 이거나, Promise 를 리턴하는 함수",
                    "type": "Array"
                },
                {
                    "name": "loadedCallback",
                    "description": "elements 가 모두 load 된 후 콜백 함수",
                    "type": "Function",
                    "optional": true
                }
            ],
            "async": 1,
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        UT.promise([me.$.codes, me.$.editor, me.$.upload], function() {\n            me.setupGrid();\n            ...\n        });\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1118,
            "description": "숫자형으로.",
            "itemtype": "method",
            "name": "toNumber",
            "params": [
                {
                    "name": "s",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "n : param 이 숫자형이 아니면 0",
                "type": "Number"
            },
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1132,
            "description": "format 형태의 string을 date 로 변환한다.",
            "itemtype": "method",
            "name": "toDate",
            "params": [
                {
                    "name": "str",
                    "description": "날짜 string",
                    "type": "String"
                },
                {
                    "name": "format",
                    "description": "str의 format",
                    "type": "String",
                    "optional": true,
                    "optdefault": "DEF.styles.formatDate.datetimeFormat"
                }
            ],
            "return": {
                "description": "변환된 date",
                "type": "Date"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        UT.toDate(\"20160420\", \"yyyyMMdd\"); // 2016/04/20\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1186,
            "description": "Array 여부",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true is array",
                "type": "Boolean"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        if (UT.isArray(dataRows)) {\n            ...\n        }\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1206,
            "description": "String 여부",
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true is string",
                "type": "Boolean"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        if (UT.isString(usrId)) {\n            ...\n        }\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1225,
            "description": "Boolean 여부",
            "itemtype": "method",
            "name": "isBoolean",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true is boolean",
                "type": "Boolean"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        me.set(\"singleSelect\", UT.isBoolean(options.singleSelect) ? options.singleSelect : false);\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1242,
            "description": "Number 여부",
            "itemtype": "method",
            "name": "isNumber",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true is number",
                "type": "Boolean"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        if (UT.isNumber(count)) {\n            ...\n        }\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1261,
            "description": "Function 여부",
            "itemtype": "method",
            "name": "isFunction",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true is function",
                "type": "Boolean"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        if (UT.isFunction(callback)) {\n            callback.call(this);\n        }\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1279,
            "description": "Object 여부\n<br>\n(주의: null 도 object이지만, 편의상 null 은 object에서 제외 한다)",
            "itemtype": "method",
            "name": "isObject",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true is object",
                "type": "Boolean"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        if (UT.isObject(options.defaultParam)) {\n            me.set(\"findList.param\", options.defaultParam);\n        }\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1300,
            "description": "Date 여부",
            "itemtype": "method",
            "name": "isDate",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true is date",
                "type": "Boolean"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        if (UT.isDate(param)) {\n            ...\n        }\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1319,
            "description": "데이터의 empty 여부\n<br>\nstring일 경우 trim 후 empty 검사한다",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "String|array"
                }
            ],
            "return": {
                "description": "true is empty",
                "type": "Boolean"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n        ...\n        if (!UT.isEmpty(item)) {\n            ...\n        }\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1340,
            "description": "input element에서 enter key가 눌렸을 때의 이벤트",
            "itemtype": "method",
            "name": "enter",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "enter key가 눌린 후 콜백 함수",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1361,
            "description": "부모를 탐색하며 selector와 동일한 엘리먼트를 찾아줌",
            "itemtype": "method",
            "name": "closest",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "selector",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1383,
            "description": "현재 화면의 MenuId를 return",
            "itemtype": "method",
            "name": "getMenuId",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "menuId",
                "type": "String"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1413,
            "description": "현재 화면의 authList를 return",
            "itemtype": "method",
            "name": "getAuthList",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "authList",
                "type": "Array"
            },
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1431,
            "description": "menuId를 통해 메뉴생성",
            "itemtype": "method",
            "name": "createWindowByMenuId",
            "params": [
                {
                    "name": "menuId",
                    "description": "메뉴아이디",
                    "type": "String"
                }
            ],
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1458,
            "description": "메뉴 생성",
            "itemtype": "method",
            "name": "createWindow",
            "params": [
                {
                    "name": "menuId",
                    "description": "메뉴아이디",
                    "type": "String"
                },
                {
                    "name": "menuName",
                    "description": "메뉴명",
                    "type": "String"
                },
                {
                    "name": "menuUrl",
                    "description": "메뉴URL",
                    "type": "String"
                }
            ],
            "example": [
                "\n    someFunction: function() {\n        var me = this;\n    }"
            ],
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1480,
            "description": "Array 에 특정  필드에 특정 값이 필터값과 같으면 Array를 재생성함.",
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1509,
            "description": "TODO : 날짜,시간,분이 있는 component의 값을 date로\ndt.hour.min이 있는 data의 경우 dt로 date를 만들어서 셋팅\n\nynkim",
            "class": "UT"
        },
        {
            "file": "js\\util.js",
            "line": 1534,
            "description": "TODO: 추가개발필요 )))) date의 값을 날짜,시간,분이 있는 값으로 셋팅\ndata에 dt가 있는  데이타의 경우 dt,hour,min data를 만들어서 셋팅\n\nynkim",
            "class": "UT"
        },
        {
            "file": "js\\validator.js",
            "line": 82,
            "description": "그리드 데이터의 유효성 검사",
            "itemtype": "method",
            "name": "VALID.isValidGridData",
            "params": [
                {
                    "name": "gridView",
                    "description": "그리드 instance",
                    "type": "Object"
                },
                {
                    "name": "validator",
                    "description": "유효성 검사 항목",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "true - 유효함",
                "type": "Boolean"
            },
            "example": [
                "\n<pre>\n</pre>"
            ],
            "class": "VALID"
        },
        {
            "file": "js\\validator.js",
            "line": 156,
            "description": "일반 데이터의 유효성 검사",
            "itemtype": "method",
            "name": "VALID.isValidData",
            "params": [
                {
                    "name": "data",
                    "description": "검사할 변수들이 포함된 객체",
                    "type": "Object"
                },
                {
                    "name": "validator",
                    "description": "유효성 검사 항목",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "true - 유효함",
                "type": "Boolean"
            },
            "example": [
                "\n<pre>\n</pre>"
            ],
            "class": "VALID"
        },
        {
            "file": "js\\validator.js",
            "line": 231,
            "description": "validator 항목",
            "itemtype": "property",
            "name": "validator",
            "type": "object",
            "example": [
                "\n<pre>\n{\n    text: \"대상 필드명\", - 그리드에서는 컬럼 header text를 이용하므로 생략한다.\n    fieldName: \"target_fieldname\",\n    check: [\n        \"unique\",    - unique. 그리드에서만 가능. 출력 메시지 - {0}에 동일한 값이 존재합니다\n        \"required\",  - 필수입력. 출력 메시지 - {0}은(는) 필수값입니다\n        \"selected\",  - 필수선택. 출력 메시지 - {0}을(를) 선택하십시오\n        \"!space\",    - 문자열 중에 공백문자 허용안함. 출력 메시지 - {0}은(는) 공백문자를 허용하지 않습니다\n        \"alphabet\",  - 영문자만 입력 가능. 출력 메시지 - {0}은(는) 영문자만 입력할 수 있습니다\n        \"number\"     - 숫자 형식만 입력 가능. 출력 메시지 - {0}은(는) 숫자형식만 입력할 수 있습니다\n    ],\n    maxLength: 10,   - 최대 입력 길이. 출력 메시지 - {0}은(는) {1}자 이하로 입력하십시오\n    minLength: 10,   - 최소 입력 길이. 출력 메시지 - {0}은(는) {1}자 이상 입력하십시오\n    fixLength: 10,   - 고정 입력 길이. 출력 메시지 - {0}은(는) {1}자로 입력하십시오\n    gtValue: 10,     - 값 비교 ( > ). 출력 메시지 - {0}은(는) {1} 보다 큰값으로 입력하십시오\n    geValue: 10,     - 값 비교 ( >= ). 출력 메시지 - {0}은(는) {1}이상 값으로 입력하십시오\n    ltValue: 10,     - 값 비교 ( < ). 출력 메시지 - {0}은(는) {1} 보다 작은값으로 입력하십시오\n    leValue: 10,     - 값 비교 ( <= ). 출력 메시지 - {0}은(는) {1}이하 값으로 입력하십시오\n    gtDate: today,   - 날짜 비교 ( > ). 출력 메시지 - {0}은(는) {1}이후 날짜로 입력하십시오\n    geDate: today,   - 날짜 비교 ( >= ). 출력 메시지 - {0}은(는) {1}이후 날짜로 입력하십시오\n    ltDate: today,   - 날짜 비교 ( < ). 출력 메시지 - {0}은(는) {1}이전 날짜로 입력하십시오\n    leDate: today    - 날짜 비교 ( <= ). 출력 메시지 - {0}은(는) {1}이전 날짜로 입력하십시오\n    gtValue: {\n        fieldName: \"compare_fieldname\"  // 다른 필드값과 비교시\n    }\n    geValue: {\n        fieldName: \"compare_fieldname\"  // 다른 필드값과 비교시\n    }\n    ltValue: {\n        fieldName: \"compare_fieldname\"  // 다른 필드값과 비교시\n    }\n    leValue: {\n        fieldName: \"compare_fieldname\"  // 다른 필드값과 비교시\n    }\n    gtDate: {\n        fieldName: \"compare_fieldname\"  // 다른 필드값과 비교시\n    }\n    gtDate: {\n        fieldName: \"compare_fieldname\"  // 다른 필드값과 비교시\n    }\n    ltDate: {\n        fieldName: \"compare_fieldname\"  // 다른 필드값과 비교시\n    }\n    leDate: {\n        fieldName: \"compare_fieldname\"  // 다른 필드값과 비교시\n    }\n}\n</pre>"
            ],
            "class": "VALID"
        },
        {
            "file": "js\\validator.js",
            "line": 531,
            "description": "value가 empty 인지 검사\n<pre>\nstring일 경우 trim 후 empty 검사한다\narray일 경우 크기가 0 이면 empty\nnumber일 경우 숫자 형식이 아니면 empty 로 간주한다\n</pre>",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String|number|array"
                }
            ],
            "return": {
                "description": "true is empty",
                "type": "Boolean"
            },
            "class": "VALID"
        },
        {
            "file": "js\\validator.js",
            "line": 560,
            "description": "숫자인 경우 문자열로 변환",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "toString",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "VALID"
        },
        {
            "file": "js\\validator.js",
            "line": 575,
            "description": "숫자형식으로 변환",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "toNumber",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "VALID"
        },
        {
            "file": "js\\validator.js",
            "line": 596,
            "description": "날짜의 time 값으로 변환",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "toTime",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "VALID"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: filename",
            "line": " html\\cc-item-search.html:27"
        },
        {
            "message": "param name missing: {string}",
            "line": " js\\i18n.js:12"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\upload.js:313"
        },
        {
            "message": "Missing item type\n: 품목코드 검색 custom tag\n  <pre>\n </pre>",
            "line": " html\\cc-item-search.html:27"
        },
        {
            "message": "Missing item type\nRFX 실패",
            "line": " js\\def.js:62"
        },
        {
            "message": "Missing item type\nRFX 포기",
            "line": " js\\def.js:67"
        },
        {
            "message": "Missing item type\nJSON checkedState Rows",
            "line": " js\\grid.js:1348"
        },
        {
            "message": "Missing item type\n다국어 처리 instance",
            "line": " js\\i18n.js:7"
        },
        {
            "message": "Missing item type\nArray 에 특정  필드에 특정 값이 필터값과 같으면 Array를 재생성함.",
            "line": " js\\util.js:1480"
        },
        {
            "message": "Missing item type\nTODO : 날짜,시간,분이 있는 component의 값을 date로\ndt.hour.min이 있는 data의 경우 dt로 date를 만들어서 셋팅\n\nynkim",
            "line": " js\\util.js:1509"
        },
        {
            "message": "Missing item type\nTODO: 추가개발필요 )))) date의 값을 날짜,시간,분이 있는 값으로 셋팅\ndata에 dt가 있는  데이타의 경우 dt,hour,min data를 만들어서 셋팅\n\nynkim",
            "line": " js\\util.js:1534"
        }
    ]
}