/*
 * File: app/view/pr/product/shared/PRDetail.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PublicPro.view.pr.product.shared.PRDetail', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.prproductsharedprdetail',

    requires: [
        'PublicPro.view.pr.product.shared.PRDetailViewModel',
        'PublicPro.view.pr.product.shared.PRDetailViewController',
        'PublicPro.view.cmmn.PopupItemSearch',
        'PublicPro.view.pr.product.progress.PopupItemValueLumpApply',
        'PublicPro.view.pr.product.receipt.PopupPRReject',
        'Ext.toolbar.Toolbar',
        'Ext.toolbar.Spacer',
        'Ext.tab.Panel',
        'Ext.form.Panel',
        'Ext.form.field.ComboBox',
        'Etna.form.field.Currency',
        'Ext.form.field.TextArea',
        'Etna.form.field.Attachment',
        'Ext.tab.Tab',
        'Ext.grid.Panel',
        'Ext.selection.CheckboxModel',
        'Etna.grid.column.Status',
        'Etna.grid.column.Eliminate',
        'Ext.form.field.Checkbox',
        'Etna.grid.column.Store',
        'Ext.grid.column.Number',
        'Etna.grid.column.Currency',
        'Ext.grid.column.Date',
        'Ext.form.field.Date',
        'Etna.grid.column.Attachment',
        'Ext.grid.column.Action',
        'Ext.grid.View',
        'Ext.grid.plugin.CellEditing',
        'Etna.grid.plugin.CellTip',
        'Etna.grid.plugin.Block',
        'Etna.grid.plugin.Context'
    ],

    controller: 'prproductsharedprdetail',
    viewModel: {
        type: 'prproductsharedprdetail'
    },
    autoShow: true,
    ui: 'main',
    title: '#{구매요청 정보}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'page',
            items: [
                {
                    xtype: 'tbspacer',
                    flex: 1
                },
                {
                    xtype: 'button',
                    hideMode: 'visibility',
                    itemId: 'copyButton',
                    iconCls: 'btn-copy',
                    text: '#{구매요청 복사}',
                    bind: {
                        hidden: '{!copyState}'
                    },
                    listeners: {
                        click: 'onCopyButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    itemId: 'saveButton',
                    iconCls: 'btn-save',
                    text: '#{임시저장}',
                    bind: {
                        hidden: '{!saveState}'
                    },
                    listeners: {
                        click: 'onSaveButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    itemId: 'requestButton',
                    iconCls: 'btn-send',
                    text: '#{구매요청}',
                    bind: {
                        hidden: '{!saveState}'
                    },
                    listeners: {
                        click: 'onRequestButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    itemId: 'sendButton',
                    iconCls: 'btn-send',
                    text: '#{결재요청}',
                    bind: {
                        hidden: '{!saveState}'
                    },
                    listeners: {
                        click: 'onSendButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    itemId: 'deleteButton',
                    iconCls: 'btn-delete',
                    text: '#{삭제}',
                    bind: {
                        hidden: '{!deleteState}'
                    },
                    listeners: {
                        click: 'onDeleteButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    itemId: 'closeButton',
                    iconCls: 'btn-close',
                    text: '#{닫기}',
                    listeners: {
                        click: 'onCloseButtonClick'
                    }
                }
            ]
        }
    ],
    listeners: {
        afterrender: 'onWindowAfterRender'
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                items: [
                    {
                        xtype: 'tabpanel',
                        beforeRenderChildren: true,
                        flex: 1,
                        reference: 'tabPanel',
                        cls: 'nbr',
                        itemId: 'prTabPanel',
                        activeTab: 0,
                        items: [
                            {
                                xtype: 'form',
                                fixed: true,
                                autoScroll: true,
                                itemId: 'prInfoForm',
                                modelValidation: true,
                                rtl: false,
                                layout: 'column',
                                animCollapse: false,
                                bodyBorder: false,
                                bodyPadding: 5,
                                collapsed: false,
                                collapsible: true,
                                header: false,
                                title: '#{구매요청 기본정보}',
                                fieldDefaults: {
                                    labelWidth: 140
                                },
                                trackResetOnLoad: true,
                                items: [
                                    {
                                        xtype: 'form',
                                        columnWidth: 1,
                                        reference: 'defaultInfo',
                                        margin: '0 0 5 0',
                                        ui: 'table',
                                        collapsible: true,
                                        title: '#{기본정보}',
                                        layout: {
                                            type: 'table',
                                            columns: 2,
                                            tdAttrs: {
                                                style: {
                                                    width: '50%'
                                                }
                                            }
                                        },
                                        items: [
                                            {
                                                xtype: 'combobox',
                                                width: 340,
                                                fieldLabel: '#{구매 운영단위}',
                                                editable: false,
                                                emptyText: '#{선택}',
                                                displayField: 'name',
                                                queryMode: 'local',
                                                valueField: 'id',
                                                bind: {
                                                    value: '{prData.operatingUnitId}',
                                                    readOnly: '{!catalogItem}',
                                                    store: '{operatingUnitStore}'
                                                }
                                            },
                                            {
                                                xtype: 'textfield',
                                                width: 340,
                                                fieldLabel: '#{구매요청 번호}',
                                                readOnly: true,
                                                bind: {
                                                    value: '{prData.no}'
                                                }
                                            },
                                            {
                                                xtype: 'textfield',
                                                colspan: 2,
                                                width: '100%',
                                                fieldLabel: '#{구매요청 명}',
                                                allowBlank: false,
                                                enforceMaxLength: true,
                                                maxLength: 100,
                                                bind: {
                                                    value: '{prData.name}',
                                                    readOnly: '{!saveState}'
                                                }
                                            },
                                            {
                                                xtype: 'combobox',
                                                width: 260,
                                                fieldLabel: '#{구매유형}',
                                                readOnly: true,
                                                editable: false,
                                                queryMode: 'local',
                                                valueField: 'value',
                                                bind: {
                                                    value: '{prData.requestType}',
                                                    store: '{itemTypeKindStore}'
                                                }
                                            },
                                            {
                                                xtype: 'combobox',
                                                width: 260,
                                                fieldLabel: '#{내외자 구분}',
                                                allowBlank: false,
                                                editable: false,
                                                queryMode: 'local',
                                                valueField: 'value',
                                                bind: {
                                                    value: '{prData.inOutType}',
                                                    readOnly: '{!saveState}',
                                                    store: '{InOutTypeKindStore}'
                                                },
                                                listeners: {
                                                    change: 'onInOutTypeComboChange'
                                                }
                                            },
                                            {
                                                xtype: 'textfield',
                                                width: 340,
                                                fieldLabel: '#{구매요청자}',
                                                readOnly: true,
                                                bind: {
                                                    value: '{prData.requesterName}'
                                                }
                                            },
                                            {
                                                xtype: 'textfield',
                                                width: 340,
                                                fieldLabel: '#{구매요청자 연락처}',
                                                allowBlank: false,
                                                enforceMaxLength: true,
                                                maxLength: 15,
                                                regex: /^(\d+)-(\d+)-(\d+)$/,
                                                bind: {
                                                    value: '{prData.requesterContact}',
                                                    readOnly: '{!saveState}'
                                                }
                                            },
                                            {
                                                xtype: 'textfield',
                                                width: 340,
                                                fieldLabel: '#{구매요청자 이메일}',
                                                allowBlank: false,
                                                enforceMaxLength: true,
                                                maxLength: 100,
                                                vtype: 'email',
                                                bind: {
                                                    value: '{prData.requesterEmail}',
                                                    readOnly: '{!saveState}'
                                                }
                                            },
                                            {
                                                xtype: 'combobox',
                                                width: 260,
                                                fieldLabel: '#{과세구분}',
                                                allowBlank: false,
                                                editable: false,
                                                queryMode: 'local',
                                                valueField: 'value',
                                                bind: {
                                                    value: '{prData.taxType}',
                                                    readOnly: '{!saveState}',
                                                    store: '{taxTypeKindStore}'
                                                }
                                            },
                                            {
                                                xtype: 'etnacurrencyfield',
                                                width: 340,
                                                fieldLabel: '#{예정금액}',
                                                fieldStyle: 'text-align: right;',
                                                readOnly: true,
                                                hideTrigger: true,
                                                bind: {
                                                    value: '{prData.estimatedAmount}',
                                                    currency: '{prData.currencyCode}'
                                                }
                                            },
                                            {
                                                xtype: 'combobox',
                                                width: 260,
                                                fieldLabel: '#{통화}',
                                                allowBlank: false,
                                                editable: false,
                                                queryMode: 'local',
                                                valueField: 'value',
                                                bind: {
                                                    value: '{prData.currencyCode}',
                                                    readOnly: '{readOnlyCurrencyField}',
                                                    store: '{currencyCodeStore}'
                                                },
                                                listeners: {
                                                    change: 'onComboboxChange'
                                                }
                                            },
                                            {
                                                xtype: 'etnacurrencyfield',
                                                width: 340,
                                                fieldLabel: '#{요청금액}',
                                                fieldStyle: 'text-align: right;',
                                                readOnly: true,
                                                hideTrigger: true,
                                                bind: {
                                                    value: '{prData.amount}',
                                                    currency: '{prData.currencyCode}'
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'panel',
                                        columnWidth: 1,
                                        ui: 'table',
                                        collapsible: true,
                                        title: '#{추가정보}',
                                        layout: {
                                            type: 'table',
                                            columns: 1
                                        },
                                        items: [
                                            {
                                                xtype: 'textareafield',
                                                height: 150,
                                                width: '100%',
                                                fieldLabel: '#{용도/비고}',
                                                enforceMaxLength: true,
                                                maxLength: 500,
                                                bind: {
                                                    value: '{prData.note}',
                                                    readOnly: '{!saveState}'
                                                }
                                            },
                                            {
                                                xtype: 'etnaattachmentfield',
                                                reference: 'fileUploader',
                                                height: 250,
                                                width: '100%',
                                                fieldLabel: '#{첨부파일}',
                                                bind: {
                                                    value: '{prData.attachFileGroupId}',
                                                    readOnly: '{!saveState}'
                                                }
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                xtype: 'form',
                                autoRender: true,
                                itemId: 'itemTabPanel',
                                modelValidation: true,
                                bodyPadding: 5,
                                title: '#{구매요청 품목}',
                                titleCollapse: false,
                                layout: {
                                    type: 'vbox',
                                    align: 'stretch'
                                },
                                items: [
                                    {
                                        xtype: 'gridpanel',
                                        flex: 1,
                                        reference: 'itemGrid',
                                        itemId: 'itemGridPanel',
                                        ui: 'grid',
                                        title: '#{품목 목록}',
                                        bind: {
                                            store: '{prItemStore}'
                                        },
                                        dockedItems: [
                                            {
                                                xtype: 'toolbar',
                                                dock: 'top',
                                                ui: 'grid',
                                                bind: {
                                                    hidden: '{!saveState}'
                                                },
                                                items: [
                                                    {
                                                        xtype: 'button',
                                                        itemId: 'itemSearchButton',
                                                        iconCls: 'btn-search',
                                                        text: '#{품목 검색}',
                                                        bind: {
                                                            hidden: '{catalogItem}'
                                                        },
                                                        listeners: {
                                                            click: 'onItemSearchButtonClick'
                                                        }
                                                    },
                                                    {
                                                        xtype: 'button',
                                                        itemId: 'allApplyButton',
                                                        iconCls: 'btn-check',
                                                        text: '#{일괄적용}',
                                                        bind: {
                                                            disabled: '{disabledItemAllApplyBtn}'
                                                        },
                                                        listeners: {
                                                            click: 'onAllApplyButtonClick'
                                                        }
                                                    }
                                                ]
                                            }
                                        ],
                                        selModel: {
                                            selType: 'checkboxmodel',
                                            mode: 'SIMPLE',
                                            checkOnly: true
                                        },
                                        columns: [
                                            {
                                                xtype: 'etnastatuscolumn',
                                                width: 50,
                                                align: 'center',
                                                text: '#{상태}',
                                                bind: {
                                                    hidden: '{!saveState}'
                                                }
                                            },
                                            {
                                                xtype: 'etnaeliminatecolumn',
                                                width: 50,
                                                align: 'center',
                                                text: '#{삭제}',
                                                bind: {
                                                    hidden: '{!saveState}'
                                                },
                                                editor: {
                                                    xtype: 'checkboxfield'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                width: 80,
                                                align: 'center',
                                                dataIndex: 'itemLineNo',
                                                text: '#{항번}'
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                width: 100,
                                                align: 'center',
                                                dataIndex: 'itemCode',
                                                text: '#{품목 코드}'
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                width: 200,
                                                dataIndex: 'itemName',
                                                text: '#{품목 명}'
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                width: 200,
                                                dataIndex: 'itemSpec',
                                                text: '#{규격}'
                                            },
                                            {
                                                xtype: 'etnastorecolumn',
                                                width: 60,
                                                align: 'center',
                                                dataIndex: 'itemUnit',
                                                text: '#{단위}',
                                                valueField: 'value',
                                                displayField: 'text',
                                                bind: {
                                                    store: '{unitCodeStore}'
                                                },
                                                editor: {
                                                    xtype: 'combobox',
                                                    editable: false,
                                                    queryMode: 'local',
                                                    valueField: 'value',
                                                    bind: {
                                                        store: '{unitCodeStore}'
                                                    }
                                                }
                                            },
                                            {
                                                xtype: 'numbercolumn',
                                                required: true,
                                                kind: 'quantity',
                                                width: 100,
                                                align: 'right',
                                                dataIndex: 'quantity',
                                                text: '#{요청수량}',
                                                editor: {
                                                    xtype: 'numberfield',
                                                    kind: 'quantity',
                                                    hideTrigger: true,
                                                    selectOnFocus: true,
                                                    autoStripChars: true,
                                                    minValue: 0
                                                }
                                            },
                                            {
                                                xtype: 'etnacurrencycolumn',
                                                width: 100,
                                                align: 'right',
                                                dataIndex: 'unitPrice',
                                                text: '#{요청단가}',
                                                bind: {
                                                    currency: '{prData.currencyCode}'
                                                },
                                                editor: {
                                                    xtype: 'etnacurrencyfield',
                                                    hideTrigger: true,
                                                    selectOnFocus: true,
                                                    autoStripChars: true,
                                                    minValue: 0,
                                                    bind: {
                                                        currency: '{prData.currencyCode}'
                                                    }
                                                }
                                            },
                                            {
                                                xtype: 'etnacurrencycolumn',
                                                width: 100,
                                                align: 'right',
                                                dataIndex: 'amount',
                                                text: '#{요청금액}',
                                                bind: {
                                                    currency: '{prData.currencyCode}'
                                                }
                                            },
                                            {
                                                xtype: 'etnacurrencycolumn',
                                                width: 100,
                                                align: 'right',
                                                dataIndex: 'estimatedPrice',
                                                text: '#{예정금액}',
                                                bind: {
                                                    currency: '{prData.currencyCode}'
                                                },
                                                editor: {
                                                    xtype: 'etnacurrencyfield',
                                                    hideTrigger: true,
                                                    selectOnFocus: true,
                                                    autoStripChars: true,
                                                    minValue: 0,
                                                    bind: {
                                                        currency: '{prData.currencyCode}'
                                                    }
                                                }
                                            },
                                            {
                                                xtype: 'datecolumn',
                                                required: true,
                                                width: 120,
                                                align: 'center',
                                                dataIndex: 'deliveryDueDate',
                                                text: '#{납품요청 일자}',
                                                editor: {
                                                    xtype: 'datefield',
                                                    bind: {
                                                        minValue: '{newDate}'
                                                    }
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                width: 150,
                                                dataIndex: 'deliveryLocation',
                                                text: '#{배송장소}',
                                                editor: {
                                                    xtype: 'textfield',
                                                    enforceMaxLength: true,
                                                    maxLength: 300
                                                }
                                            },
                                            {
                                                xtype: 'etnastorecolumn',
                                                width: 100,
                                                align: 'center',
                                                dataIndex: 'purchaseGroupId',
                                                text: '#{구매그룹}',
                                                valueField: 'id',
                                                displayField: 'name',
                                                bind: {
                                                    store: '{purchaseGroupStore}'
                                                },
                                                editor: {
                                                    xtype: 'combobox',
                                                    editable: false,
                                                    displayField: 'name',
                                                    queryMode: 'local',
                                                    valueField: 'id',
                                                    bind: {
                                                        store: '{purchaseGroupStore}'
                                                    }
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                width: 100,
                                                align: 'center',
                                                dataIndex: 'requesterName',
                                                text: '#{구매요청자}'
                                            },
                                            {
                                                xtype: 'etnaattachmentcolumn',
                                                width: 80,
                                                align: 'center',
                                                dataIndex: 'attachFileGroupId',
                                                menuText: '#{첨부}',
                                                text: '#{첨부}',
                                                countDataIndex: 'countAttachFileItem',
                                                bind: {
                                                    readOnly: '{!saveState}'
                                                }
                                            },
                                            {
                                                xtype: 'etnastorecolumn',
                                                width: 100,
                                                align: 'center',
                                                dataIndex: 'receiveYn',
                                                text: '#{접수구분}',
                                                valueField: 'value',
                                                displayField: 'text',
                                                bind: {
                                                    hidden: '{!approveState}',
                                                    store: '{receiveYnCodeStore}'
                                                }
                                            },
                                            {
                                                xtype: 'actioncolumn',
                                                handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                    var controller = item.up('[controller]').controller;
                                                    controller.loadPRRejectPopup.apply(controller, [record]);
                                                },
                                                isDisabled: function(view, rowIndex, colIndex, item, record) {
                                                    var progressState = record.get('progressState');
                                                    if(progressState==='Reject') {
                                                        return false;
                                                    }
                                                    return true;
                                                },
                                                width: 100,
                                                align: 'center',
                                                dataIndex: 'rejectReason',
                                                menuText: '#{반송사유}',
                                                text: '#{반송사유}',
                                                iconCls: 'btn-search',
                                                bind: {
                                                    hidden: '{!approveState}'
                                                }
                                            }
                                        ],
                                        plugins: [
                                            Ext.create('Ext.grid.plugin.CellEditing', {
                                                listeners: {
                                                    edit: 'onCellEditingEdit',
                                                    beforeedit: 'onCellEditingBeforeEdit'
                                                }
                                            }),
                                            {
                                                ptype: 'etnacelltip',
                                                editableCls: 'x-etna-grid-editable-cell',
                                                requiredCls: 'x-etna-grid-required-cell',
                                                dirtyCls: 'x-etna-grid-dirty-cell'
                                            },
                                            {
                                                ptype: 'etnagridblock'
                                            },
                                            {
                                                ptype: 'etnagridcontext',
                                                contextMenu: true,
                                                advancedContextMenu: true
                                            }
                                        ],
                                        listeners: {
                                            selectionchange: 'onItemGridPanelSelectionChange'
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        xtype: 'cmmnpopupitemsearch',
                        modal: true,
                        lazy: true,
                        reference: 'popupItemSearch',
                        floating: true,
                        closable: true,
                        closeAction: 'hide',
                        listeners: {
                            additemlist: 'onAddItemList'
                        }
                    },
                    {
                        xtype: 'prproductprogresspopupitemvaluelumpapply',
                        modal: true,
                        lazy: true,
                        reference: 'popupItemAllApply',
                        draggable: true,
                        floating: true,
                        closeAction: 'hide',
                        listeners: {
                            applyallitem: 'onApplyallItem'
                        }
                    },
                    {
                        xtype: 'prproductreceiptpopupprreject',
                        lazy: true,
                        modal: true,
                        reference: 'popupPRReject',
                        draggable: true,
                        floating: true,
                        height: 200,
                        width: 500,
                        closeAction: 'hide'
                    }
                ]
            };
        me.processPrproductsharedPRDetail(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processPrproductsharedPRDetail: function(config) {
        var me = this, items = me.items || config.items;

        items.push({
            xclass:'CmmnAdmin.view.approval.shared.ApprovalEdit',
            reference : 'approvalEdit',
            lazy : true,
            floating : true,
            closeAction : 'hide',
            draggable: true,
            autoShow: false,
            modal:true,
            width : 800,
            height : 550,
            listeners: {
                reload: 'afterApprovalSave',
                complete:'afterApprovalRequest'
            }
        });
    }

});

/*
 * File: app/view/pr/product/shared/PRDetailViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PublicPro.view.pr.product.shared.PRDetailViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.prproductsharedprdetail',

    init: function() {
        var me = this, view = me.getView();

        view.loadPrDetailData   = Ext.Function.bind(me.loadPrDetailData   , me);
        view.setDefaultFormData = Ext.Function.bind(me.setDefaultFormData , me);
        view.setCatalogItems    = Ext.Function.bind(me.setCatalogItems    , me);
        view.resetPrDetail      = Ext.Function.bind(me.resetPrDetail      , me);
    },

    clearData: function() {
        var me = this;

        me.lookupReference('tabPanel').setActiveTab(0);

        me.getViewModel().set('prData'                 , Ext.create('PublicPro.model.pr.PR'));
        me.getViewModel().set('disabledItemAllApplyBtn', true);
        me.getViewModel().set('readOnlyCurrencyField'  , false);
        me.getViewModel().set('catalogItem'            , false);
        me.getViewModel().set('rejectAllState'         , false);
        me.getViewModel().getStore('prItemStore').removeAll();

        me.lookupReference('fileUploader').reset();
    },

    addItemValidate: function(store, itemList) {
        var me = this;
        var itemMapList = new Ext.util.HashMap();
        store.each(function(item){
            itemMapList.add(item.get('itemId'), item);
        });
        var existLength = 0, noExistLength = 0 ;
        Ext.each(itemList, function(item){
            var isExist = !!itemMapList.get(item.get('itemId'));
            if(isExist === true){
                existLength ++;
            }else{
                noExistLength ++;
                me.addItemToStore(store, item);
            }
        });
        if(existLength > 0 && noExistLength > 0){
            Etna.Message.alert(Ext.String.format('#{중복 {0}건을 제외하고 {1}건을 추가 하였습니다.}', existLength, noExistLength));
        } else if(noExistLength === 0){
            Etna.Message.alert(Ext.String.format('#{중복 {0}건이 있습니다.}', existLength));
        } else{
            Etna.Message.alert(Ext.String.format('#{{0}건 추가 하였습니다.}', noExistLength));
        }
    },

    addItemToStore: function(store, item) {
        var me = this;
        var prData = me.getViewModel().get('prData');
        var model = Ext.create('PublicPro.model.pr.PRItem', {
            priceContractId: item.get('priceContractId'),
            autoPoYn : item.get('autoPoYn'),
            itemId   : item.get('itemId'),
            itemCode : item.get('itemCode'),
            itemName : item.get('itemName'),
            itemSpec : item.get('itemSpec'),
            itemUnit : item.get('unitCode'),
            unitPrice: item.get('unitPrice'),
            progressState  : 'PRProgress',
            prId           : prData.get('id'),
            taxType        : prData.get('taxType'),
            currencyCode   : prData.get('currencyCode'),
            requesterId    : prData.get('requesterId'),
            requesterName  : prData.get('requesterName'),
            operatingUnitId: prData.get('operatingUnitId'),
            requestType    : prData.get('requestType')
        });
        store.add(model);
    },

    addCatalogItemList: function(itemList) {
        var me = this,
            view = this.getView(),
            vm = this.getViewModel();

        view.setLoading(true);

        var loginUser = Cmmn.User.getData();
        var model = Ext.create('PublicPro.model.pr.PR',{
            requestType      : 'Product',
            requesterId      : loginUser.id,
            requesterName    : loginUser.name,
            requesterContact : loginUser.phoneNo,
            requesterEmail   : loginUser.email,
            progressState    : 'CreateProgress'
        });

        vm.set('prData', model);

        var prData = vm.get('prData');
        var store = vm.get('prItemStore');

        var totalAmount = 0 ;
        Ext.each(itemList, function(item){
            totalAmount = Number(new Big(totalAmount).plus(new Big(item.unitPrice).times(new Big(item.quantity))));
            var model = Ext.create('PublicPro.model.pr.PRItem', {
                priceContractId: item.priceContractId,
                autoPoYn : item.autoPoYn,
                itemId   : item.itemId,
                itemCode : item.itemCode,
                itemName : item.itemName,
                itemSpec : item.itemSpec,
                itemUnit : item.itemUnit,
                unitPrice: item.unitPrice,
                quantity : item.quantity,
                amount   : Number(new Big(item.unitPrice).times(new Big(item.quantity))),
                progressState  : 'PRProgress',
                prId           : prData.get('id'),
                taxType        : prData.get('taxType'),
                currencyCode   : prData.get('currencyCode'),
                requesterId    : prData.get('requesterId'),
                requesterName  : prData.get('requesterName'),
                operatingUnitId: prData.get('operatingUnitId'),
                requestType    : prData.get('requestType')
            });
            store.add(model);
        });
        prData.set('amount', totalAmount);

        Etna.onDone(function(){

            view.setLoading(false);

            me.suspend();

            me.hideGridColumn();
        });
    },

    approvalRequestPr: function() {
        var me = this;
        me.getView().setLoading(true);
        var uploader = me.lookupReference('fileUploader');
        uploader.upload().then({
            success:function(){
                var prData = me.getViewModel().get('prData').getData();
                var itemList = me.getViewModel().get('prItemStore').toBatch();
                me.getViewModel().savePr(prData, itemList).then({
                    success:function(){
                        me.getView().setLoading(false);

                        me.getView().fireEvent('search');

                        me.loadPrDetailData(prData.id);
                        me.loadApprovalEditPopup(prData.id);
                    },
                    failure:function(){
                        me.getView().setLoading(false);
                    }
                });
            },
            failure:function(){
                me.getView().setLoading(false);
            }
        });
    },

    calculateAmount: function() {
        var me = this;
        var store = me.getViewModel().get('prItemStore');

        var mapList = new Ext.util.HashMap();
        Ext.Array.each(store.getRemovedRecords(), function(record){
            mapList.add(record.get('id'), record);
        });

        var sumBA = 0, sumA = 0;
        Ext.Array.each(store.getRange(), function(record){
            var isExist = mapList.get(record.get('id'));
            if(!isExist){
                var estimatedPrice = new Big(record.get('estimatedPrice'));
                var quantity = new Big(record.get('quantity'));
                var amount = new Big(record.get('amount'));

                sumBA = Number(new Big(sumBA).plus(estimatedPrice.times(quantity)));
                sumA  = Number(new Big(sumA).plus(amount));
            }
        });

        var prData = me.getViewModel().get('prData');
        prData.set('amount', sumA);
        prData.set('estimatedAmount', sumBA);
    },

    copyPr: function() {
        var me = this;
        var prId = me.getViewModel().get('prData').get('id');
        var newModel = Ext.create('PublicPro.model.pr.PR');
        var newPrId = newModel.get('id');

        me.getView().setLoading(true);
        me.getViewModel().copyPr(prId, newPrId).then({
            success:function(){
                me.lookupReference('tabPanel').setActiveTab(0);
                me.loadPrDetailData(newPrId);
                me.getView().fireEvent('search');
                Etna.Message.alert('#{복사 하였습니다.}');
                me.getView().setLoading(false);
            },
            failure:function(){
                me.getView().setLoading(false);
            }
        });
    },

    deletePr: function() {
        var me = this;
        var prId = me.getViewModel().get('prData').get('id');
        me.getView().setLoading(true);
        me.getViewModel().deletePr(prId).then({
            success:function(){

                Etna.Message.alert('#{삭제 하였습니다.}');
                me.getView().setLoading(false);

                me.getView().fireEvent('search');
                me.onCloseButtonClick();
            },
            failure:function(error){
                me.getView().setLoading(false);
            }
        });
    },

    findPr: function(prId) {
        var me = this, vm = this.getViewModel();

        me.getViewModel().findPr(prId).then({
            success:function(result){
                me.getViewModel().set('prData', Ext.create('PublicPro.model.pr.PR',result));
            },
            failure:function(error){}
        });
    },

    findPrItems: function(prId) {
        var me = this, view = this.getView();
        var store = me.getViewModel().getStore('prItemStore');

        store.load({
            params:{prId: prId},
            callback:function(result){}
        });
    },

    loadPrDetailData: function(prId, rejectAllState) {
        var me = this,
            vm = me.getViewModel();

        me.getView().setLoading(true);

        if(!!rejectAllState){
            vm.set('rejectAllState', rejectAllState);
        } else {
            vm.set('rejectAllState', false);
        }

        me.findPr(prId);
        me.findPrItems(prId);

        Etna.onDone(function() {

            me.getView().setLoading(false);

            me.suspend();

            me.afterAllSearch();

            me.hideGridColumn();
        });
    },

    afterAllSearch: function() {
        var me = this, vm = this.getViewModel();

        me.setCurrencyComboReadOnly();
    },

    isAutoPoByPr: function() {
        var me = this;
        var store = me.getViewModel().get('prItemStore');
        var list = store.getRange();
        var removeList = new Ext.util.HashMap();
        Ext.each(store.getRemovedRecords(), function(data){
            removeList.add(data.get('id'), data.get('id'));
        });
        for(var i=0; i<list.length; i++){
            var exist = !!removeList.get(list[i].get('id'));
            if(exist===false && list[i].get('autoPoYn') === true){
                return true;
            }
        }
        return false;
    },

    requestPr: function() {
        var me = this;
        me.getView().setLoading(true);
        var uploader = me.lookupReference('fileUploader');
        uploader.upload().then({
            success:function(){
                var prData = me.getViewModel().get('prData').getData();
                var itemList = me.getViewModel().get('prItemStore').toBatch();
                me.getViewModel().savePr(prData, itemList).then({
                    success:function(){
                        me.getViewModel().requestPr(prData.id).then({
                            success:function(){
                                if(me.isAutoPoByPr()){
                                    me.getViewModel().autoPoByPr(prData.id).then({
                                        success:function(){
                                            Etna.Message.alert('#{구매요청/자동발주 하였습니다.}');
                                            me.getView().setLoading(false);
                                            me.getView().fireEvent('search');
                                            me.onCloseButtonClick();
                                        },
                                        failure:function(){
                                            me.getView().setLoading(false);
                                        }
                                    });
                                }else{
                                    Etna.Message.alert('#{구매요청 하였습니다.}');
                                    me.getView().setLoading(false);
                                    me.getView().fireEvent('search');
                                    me.onCloseButtonClick();
                                }
                            },
                            failure:function(){
                                me.getView().setLoading(false);
                            }
                        });
                    },
                    failure:function(){
                        me.getView().setLoading(false);
                    }
                });
            },
            failure:function(){
                me.getView().setLoading(false);
            }
        });
    },

    save: function() {
        var me = this;
        me.getView().setLoading(true);
        var uploader = me.lookupReference('fileUploader');
        uploader.upload().then({
            success:function(){
                var prData = me.getViewModel().get('prData').getData();
                var itemList = me.getViewModel().get('prItemStore').toBatch();
                me.getViewModel().savePr(prData, itemList).then({
                    success:function(){
                        me.getViewModel().get('prItemStore').commitChanges();

                        me.loadPrDetailData(prData.id);

                        me.getView().fireEvent('search');

                        Etna.Message.alert('#{저장 하였습니다.}');

                        me.getView().setLoading(false);
                    },
                    failure:function(error){
                        me.getView().setLoading(false);
                    }
                });
            },
            failure:function(){
                me.getView().setLoading(false);
            }
        });
    },

    setDefaultFormData: function(operatingUnitId) {
        var me = this, view = this.getView();

        me.getView().setLoading(true);

        Etna.onDone(function(){
            var loginUser = Cmmn.User.getData();
            var model = Ext.create('PublicPro.model.pr.PR',{
                operatingUnitId  : operatingUnitId,
                requestType      : 'Product',
                requesterId      : loginUser.id,
                requesterName    : loginUser.name,
                requesterContact : loginUser.phoneNo,
                requesterEmail   : loginUser.email,
                progressState    : 'CreateProgress',
                inOutType        : 'In',
                currencyCode     : 'KRW'

            });

            me.getViewModel().set('prData', model);
            me.getViewModel().set('readOnlyCurrencyField', true);
            me.getView().setLoading(false);

            me.suspend();

            me.hideGridColumn();
        });
    },

    validateCheck: function() {
        var me = this;
        var prData = me.getViewModel().get('prData').getData();
        var defaultInfo = me.lookupReference('defaultInfo').getForm();
        var validationYn = true;

        var fields = defaultInfo.getFields().items;
        var title = me.lookupReference('defaultInfo').title;

        var message = '';

        Ext.each(fields, function(field){
            if(!field.isValid()){
                message = Ext.String.format('#{"{0}"의 "{1}"이(가) 유효하지 않습니다.}', title, field.fieldLabel);
                validationYn = false;
                return false;
            }
        });


        if(!validationYn){
            me.lookupReference('tabPanel').setActiveTab(0);
            Etna.Message.alert(message);
        }

        return validationYn;
    },

    requestValidateCheck: function() {
        var me = this;
        var prData = me.getViewModel().get('prData').getData();

        var store = me.getViewModel().get('prItemStore');
        var list = store.getRange();
        if(list.length - store.getRemovedRecords().length < 1){
            me.lookupReference('tabPanel').setActiveTab(1);
            Etna.Message.alert('#{구매요청 품목을 하나 이상 추가해야 합니다.}');
            return false;
        }

        for(var i=0; i<list.length; i++){
            if(list[i].get('quantity') < 1){
                me.lookupReference('tabPanel').setActiveTab(1);
                Etna.Message.alert(Ext.String.format('#{{0}의 요청수량을 입력하세요.}', list[i].get('itemCode')));
                return false;
            }
            if(!list[i].get('deliveryDueDate')){
                me.lookupReference('tabPanel').setActiveTab(1);
                Etna.Message.alert(Ext.String.format('#{{0}의 납품요청일자를 입력하세요.}', list[i].get('itemCode')));
                return false;
            }
            if(list[i].get('deliveryDueDate') < Ext.Date.clearTime(new Date())) {
                me.lookupReference('tabPanel').setActiveTab(1);
                Etna.Message.alert(Ext.String.format('#{{0}의 납품요청일자는 오늘 이후로 입력하세요.}', list[i].get('itemCode')));
                return false;
            }
        }
        return true;
    },

    setCurrencyComboReadOnly: function() {
        var me= this, vm = this.getViewModel();

        var inOutType     = vm.get('prData').get('inOutType');
        var progressState = vm.get('prData').get('progressState');

        if(inOutType === 'Out' && (progressState == 'CreateProgress' || progressState == 'ApprovalReject')){
            vm.set('readOnlyCurrencyField', false);
        }else{
            vm.set('readOnlyCurrencyField', true);
        }
    },

    setCatalogItems: function(itemList) {
        var me = this, vm = this.getViewModel();

        vm.set('catalogItem', true);
        me.addCatalogItemList(itemList);
    },

    getApprovalEditPopup: function() {
        var me = this;

        var popup = me.lookupReference('approvalEdit');

        popup.show();
        popup.center();

        return popup;
    },

    loadApprovalEditPopup: function(prId) {
        var me = this;
        var popup = me.getApprovalEditPopup();
        popup.show();
        popup.setTargetId('PRCreate', prId);
    },

    afterApprovalSave: function() {
        var me = this, vm = this.getViewModel();
        var prData = vm.get('prData').getData();

        me.loadPrDetailData(prData.id);
        me.getView().fireEvent('search');
    },

    afterApprovalRequest: function() {
        var me = this;
        me.getView().fireEvent('search');
        me.onCloseButtonClick();
    },

    loadPRRejectPopup: function(record) {
        var me = this;

        var rejectReason = record.get('rejectReason');

        var popup = me.lookupReference('popupPRReject');

        popup.show();
        popup.center();
        popup.readOnlyData(rejectReason);
    },

    suspend: function() {
        var me = this, view = this.getView();

        view.suspendLayout = false;
        view.updateLayout(true);
    },

    expandComponents: function() {
        var me = this;
        var elements = Ext.ComponentQuery.query('[collapsible=true]', me.getView());

        Ext.each(elements,function(element){
            element.expand();
        });
    },

    hideGridColumn: function() {
        var me = this;
        var grid = me.lookupReference('itemGrid');

        if(!grid.rendered){
            grid.on('viewready', me.hideGridColumn, me, { single : true } );
            return;
        }

        var selectionColumn = grid.down('gridcolumn[isCheckerHd]');
        var progressState = me.getViewModel().get('prData').get('progressState');

        if(progressState === 'CreateProgress' || progressState === 'ApprovalReject'){
            return selectionColumn.setHidden(false);
        }
        return selectionColumn.setHidden(true);
    },

    onCopyButtonClick: function(button, e, eOpts) {
        var me = this;
        Etna.Message.confirm('#{복사 하시겠습니까?}', function(btn){
        if(btn=='yes'){
            me.copyPr();
        }
    });
    },

    onSaveButtonClick: function(button, e, eOpts) {
        var me = this;
        if(me.validateCheck()){
            Etna.Message.confirm('#{저장 하시겠습니까?}', function(btn){
            if(btn === 'yes'){
                me.save();
            }
        });
    }
    },

    onRequestButtonClick: function(button, e, eOpts) {
        var me = this;
        if(me.validateCheck() && me.requestValidateCheck()){
            Etna.Message.confirm('#{구매요청 하시겠습니까?}', function(btn){
            if(btn=='yes'){
                me.requestPr();
            }
        });
    }
    },

    onSendButtonClick: function(button, e, eOpts) {
        var me = this;
        if(me.requestValidateCheck()){
            Etna.Message.confirm('#{결재요청 하시겠습니까?}',function(btn){
            if(btn=='yes'){
                me.approvalRequestPr();
            }
        });
    }
    },

    onDeleteButtonClick: function(button, e, eOpts) {
        var me = this;
        Etna.Message.confirm('#{삭제 하시겠습니까?}', function(btn){
        if(btn == 'yes'){
            me.deletePr();
        }
    });
    },

    onCloseButtonClick: function(button, e, eOpts) {
        var me = this;

        me.clearData();
        me.expandComponents();

        me.getView().fireEvent('closeDetail');
    },

    onInOutTypeComboChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();

        vm.get('prData').set('inOutType', newValue);

        if(newValue == 'In'){
            vm.get('prData').set('currencyCode', 'KRW');
        }

        me.setCurrencyComboReadOnly();
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        //me.getViewModel().notify();
        me.lookupReference('itemGrid').getView().refresh();
    },

    onItemSearchButtonClick: function(button, e, eOpts) {
        var me = this, vm = this.getViewModel();

        var operatingUnitId = vm.get('prData').get('operatingUnitId');
        var requestType     = vm.get('prData').get('requestType');

        var popup = me.lookupReference('popupItemSearch');

        popup.show();
        popup.center();
        popup.load(operatingUnitId, requestType);
    },

    onAllApplyButtonClick: function(button, e, eOpts) {
        var me = this, vm = this.getViewModel();
        var prData = vm.get('prData');

        var popup = me.lookupReference('popupItemAllApply');

        popup.show();
        popup.doLayout();
        popup.center();
        popup.load(prData.get('currencyCode'));
    },

    onCellEditingEdit: function(editor, context, eOpts) {
        var me = this;
        var field = context.field;
        var record = context.record;

        if(field == 'quantity' || field == 'unitPrice'){
            var quantity = new Big(record.get('quantity'));
            var unitPrice = new Big(record.get('unitPrice'));

            var amount = Number(quantity.times(unitPrice));
            record.set('amount', amount);
        }

        me.calculateAmount();
    },

    onCellEditingBeforeEdit: function(editor, context, eOpts) {
        var me = this;
        var progressState = me.getViewModel().get('prData').get('progressState');
        if(progressState !== 'CreateProgress' && progressState !== 'NewRegistration' && progressState !== 'ApprovalReject'){
            return false;
        }else {
            return true;
        }
    },

    onItemGridPanelSelectionChange: function(model, selected, eOpts) {
        var me = this;
        if(selected.length > 0){
            me.getViewModel().set('disabledItemAllApplyBtn', false);
        }else{
            me.getViewModel().set('disabledItemAllApplyBtn', true);
        }
    },

    onWindowAfterRender: function(component, eOpts) {
        var me = this, view = this.getView();

        view.suspendLayout = true;

        Etna.onDone(function(){
            //me.getViewModel().notify();
        });
    },

    onAddItemList: function(selectedList, eventOptions) {
        var me = this;
        var store = me.getStore('prItemStore');
        me.addItemValidate(store, selectedList);
    },

    onApplyallItem: function(itemData, eventOptions) {
        var me = this;
        var selectedList = me.lookupReference('itemGrid').getSelectionModel().getSelection();

        Ext.each(selectedList, function(select){
            var unitPriceValue = !!itemData.unitPrice;
            var quantityValue = !!itemData.quantity;

            if(unitPriceValue && quantityValue) {
                itemData.amount = Number(new Big(itemData.unitPrice).times(new Big(itemData.quantity)));
            } else {
                if(unitPriceValue){
                    itemData.amount = Number(new Big(itemData.unitPrice).times(new Big(select.get('quantity'))));
                } else if(quantityValue){
                    itemData.amount = Number(new Big(itemData.quantity).times(new Big(select.get('unitPrice'))));
                } else {
                    itemData.amount = Number(new Big(select.get('quantity')).times(new Big(select.get('unitPrice'))));
                }
            }
            select.set(itemData);
        });

        me.calculateAmount();
    }

});
/*
 * File: app/view/pr/product/shared/PRDetailViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PublicPro.view.pr.product.shared.PRDetailViewModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.prproductsharedprdetail',

    requires: [
        'Cmmn.store.OperatingUnit',
        'Ext.data.proxy.Direct',
        'Ext.data.reader.Json',
        'Ext.data.field.String',
        'Cmmn.store.Enum',
        'Cmmn.store.Code',
        'Ext.app.bind.Formula',
        'PublicPro.model.pr.PRItem'
    ],

    data: {
        newDate: new Date(),
        prData: null,
        disabledItemAllApplyBtn: true,
        readOnlyCurrencyField: false,
        catalogItem: false,
        rejectAllState: null
    },

    stores: {
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        itemTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ItemTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        InOutTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.InOutTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        taxTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.TaxTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        currencyCodeStore: {
            groupCode: 'Currency',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    mapping: 'id',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        unitCodeStore: {
            groupCode: 'Unit',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    mapping: 'id',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        receiveYnCodeStore: {
            groupCode: 'ReceiveYn',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    mapping: 'id',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        prItemStore: {
            model: 'PublicPro.model.pr.PRItem',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.pr.ProductPrController.findProductPrItems',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        purchaseGroupStore: {
            autoLoad: {
                params: {
                    typeCode: 'PU'
                }
            },
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.cmmn.CommonController.findJobs',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        }
    },
    formulas: {
        deleteState: function(get) {
            var pr = get('prData');

            if(!!pr){
                var no = !!pr.get('no');
                var progressState = pr.get('progressState');

                if(no === true && (progressState === 'CreateProgress' || progressState === 'ApprovalReject') || get('rejectAllState')){
                    return true;
                }
            }

            return false;
        },
        copyState: function(get) {
            var pr = get('prData');
            if(!!pr){
                var no = !!pr.get('no');
                if(no === true){
                    return true;
                }
            }
            return false;
        },
        saveState: {
            get: function(data) {
                if(data === 'CreateProgress' || data === 'ApprovalReject'){
                    return true;
                }
                return false;
            },
            bind: '{prData.progressState}'
        },
        approveState: {
            get: function(data) {
                if(data === 'ApprovalApprove'){
                    return true;
                }
                return false;
            },
            bind: '{prData.progressState}'
        }
    },

    findPr: function(prId) {
        var deferred = Ext.create('Deft.Deferred');
        smartsuit.ui.etnajs.pro.pr.PrController.findPr(prId, function(result, e){
            if(e.status){
                deferred.resolve(result);
            }else{
                deferred.reject(e);
            }
        });
        return deferred.promise;
    },

    savePr: function(pr, prItems) {
        var deferred = Ext.create('Deft.Deferred');
        smartsuit.ui.etnajs.pro.pr.PrController.savePr(pr, prItems,function(result, e){
            if(e.status){
                deferred.resolve();
            }else{
                deferred.reject(e);
            }
        });
        return deferred.promise;
    },

    deletePr: function(prId) {
        var deferred = Ext.create('Deft.Deferred');
        smartsuit.ui.etnajs.pro.pr.PrController.deletePr(prId, function(result, e){
            if(e.status){
                deferred.resolve();
            }else{
                deferred.reject(e);
            }
        });
        return deferred.promise;
    },

    copyPr: function(prId, newPrId) {
        var deferred = Ext.create('Deft.Deferred');
        smartsuit.ui.etnajs.pro.pr.PrController.copyPr(prId, newPrId, function(result, e){
            if(e.status){
                deferred.resolve();
            }else{
                deferred.reject(e);
            }
        });
        return deferred.promise;
    },

    requestPr: function(prId) {
        var deferred = Ext.create('Deft.Deferred');
        smartsuit.ui.etnajs.pro.pr.PrController.requestPr(prId, function(result, e){
            if(e.status){
                deferred.resolve();
            }else{
                deferred.reject(e);
            }
        });
        return deferred.promise;
    },

    autoPoByPr: function(prId) {
        var deferred = Ext.create('Deft.Deferred');
        smartsuit.ui.etnajs.pro.pr.PrController.autoPoByPr(prId, function(result, e){
            if(e.status){
                deferred.resolve();
            }else{
                deferred.reject(e);
            }
        });
        return deferred.promise;
    }

});