/*
 * File: app/view/pr/product/request/PRList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PublicPro.view.pr.product.request.PRList', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.prproductrequestprlist',

    requires: [
        'PublicPro.view.pr.product.request.PRListViewModel',
        'PublicPro.view.pr.product.request.PRListViewController',
        'Ext.form.Panel',
        'Ext.toolbar.TextItem',
        'Ext.toolbar.Spacer',
        'Ext.button.Button',
        'Ext.form.field.ComboBox',
        'Ext.form.FieldContainer',
        'Ext.form.field.Date',
        'Ext.form.Label',
        'Etna.form.plugin.AutoClearButton',
        'Ext.grid.Panel',
        'Ext.selection.CheckboxModel',
        'Etna.grid.column.Store',
        'Etna.grid.column.DataActionColumn',
        'Ext.grid.column.Date',
        'Etna.grid.column.Currency',
        'Ext.grid.View',
        'Ext.toolbar.Paging',
        'Etna.grid.plugin.Export',
        'Etna.grid.plugin.Stateful',
        'Etna.grid.plugin.Filter',
        'Etna.grid.plugin.Context',
        'Etna.grid.plugin.Finder',
        'Etna.grid.plugin.Block'
    ],

    controller: 'prproductrequestprlist',
    viewModel: {
        type: 'prproductrequestprlist'
    },
    autoShow: true,
    ui: 'main',
    title: '#{구매요청 현황}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'form',
            reference: 'searchForm',
            itemId: 'searchForm',
            margin: '0 0 5 0',
            ui: 'search',
            defaults: {
                bubbleEvents: [
                    'specialkey'
                ],
                defaults: {
                    bubbleEvents: [
                        'specialkey'
                    ],
                    defaults: {
                        bubbleEvents: [
                            'specialkey'
                        ]
                    }
                }
            },
            fieldDefaults: {
                labelWidth: 140
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    style: {
                        width: '50%'
                    }
                }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    ui: 'search',
                    items: [
                        {
                            xtype: 'tbtext',
                            text: '#{신규 구매요청을 작성하고 수정합니다.}'
                        },
                        {
                            xtype: 'tbspacer',
                            flex: 1
                        },
                        {
                            xtype: 'button',
                            itemId: 'searchButton',
                            iconCls: 'btn-search',
                            text: '#{조회}',
                            listeners: {
                                click: 'onSearchButtonClick'
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'resetButton',
                            iconCls: 'btn-refresh',
                            text: '#{초기화}',
                            listeners: {
                                click: 'onResetButtonClick'
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{구매 운영단위}',
                    readOnly: false,
                    allowBlank: false,
                    editable: false,
                    emptyText: '#{선택}',
                    displayField: 'name',
                    queryMode: 'local',
                    valueField: 'id',
                    bind: {
                        value: '{searchValue.operatingUnitId}',
                        store: '{operatingUnitStore}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    fieldLabel: '#{구매요청 작성일자}',
                    layout: {
                        type: 'table',
                        columns: 3
                    },
                    items: [
                        {
                            xtype: 'datefield',
                            formBind: false,
                            itemId: 'createDateFrom',
                            width: 110,
                            name: 'fromCreateDate',
                            bind: {
                                value: '{searchValue.fromCreateDate}',
                                maxValue: '{searchValue.toCreateDate}'
                            }
                        },
                        {
                            xtype: 'label',
                            margin: '0 5',
                            text: '~'
                        },
                        {
                            xtype: 'datefield',
                            itemId: 'createDateTo',
                            width: 110,
                            name: 'toCreateDate',
                            bind: {
                                value: '{searchValue.toCreateDate}',
                                minValue: '{searchValue.fromCreateDate}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{구매요청 명}',
                    bind: {
                        value: '{searchValue.name}'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{구매요청 상태}',
                    editable: false,
                    emptyText: '#{전체}',
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{searchValue.progressState}',
                        store: '{progressStateStore}'
                    }
                }
            ],
            listeners: {
                specialkey: 'onSearchFormSpecialkey'
            },
            plugins: [
                {
                    ptype: 'autoClearButton'
                }
            ]
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            reference: 'prGrid',
            stateId: '2d66345a-9cf2-4d8a-96b8-a8718c0fbc5e',
            stateful: true,
            itemId: 'prListGrid',
            ui: 'grid',
            header: false,
            bind: {
                store: '{prListStore}'
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    ui: 'grid',
                    items: [
                        {
                            xtype: 'button',
                            itemId: 'addButton',
                            iconCls: 'btn-new',
                            text: '#{구매요청 등록}',
                            listeners: {
                                click: 'onAddButtonClick'
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'deleteButton',
                            iconCls: 'btn-delete',
                            text: '#{삭제}',
                            bind: {
                                disabled: '{disabledDeleteBtn}'
                            },
                            listeners: {
                                click: 'onDeleteButtonClick'
                            }
                        }
                    ]
                },
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    width: 360,
                    displayInfo: true,
                    bind: {
                        store: '{prListStore}'
                    }
                }
            ],
            selModel: {
                selType: 'checkboxmodel',
                mode: 'SIMPLE',
                checkOnly: true
            },
            columns: [
                {
                    xtype: 'etnastorecolumn',
                    width: 120,
                    align: 'center',
                    dataIndex: 'progressState',
                    text: '#{구매요청 상태}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{progressStateStore}'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    align: 'center',
                    dataIndex: 'operatingUnitName',
                    text: '#{구매 운영단위}'
                },
                {
                    xtype: 'etnastorecolumn',
                    width: 80,
                    align: 'center',
                    dataIndex: 'requestType',
                    text: '#{구매유형}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{itemTypeKindStore}'
                    }
                },
                {
                    xtype: 'etnadataactioncolumn',
                    handler: function(view, rowIndex, colIndex, item, e, record, row) {
                        var controller = item.up('[controller]').controller;
                        controller.onPrGridCellclick(record);
                    },
                    width: 140,
                    align: 'center',
                    dataIndex: 'no',
                    menuText: '#{구매요청 번호}',
                    text: '#{구매요청 번호}',
                    iconCls: 'icon-touch',
                    stopSelection: false,
                    iconAlign: 'right'
                },
                {
                    xtype: 'gridcolumn',
                    width: 300,
                    dataIndex: 'name',
                    text: '#{구매요청 명}'
                },
                {
                    xtype: 'datecolumn',
                    width: 140,
                    align: 'center',
                    dataIndex: 'createDateTime',
                    text: '#{구매요청 작성일자}'
                },
                {
                    xtype: 'etnastorecolumn',
                    width: 100,
                    align: 'center',
                    dataIndex: 'inOutType',
                    text: '#{내외자 구분}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{InOutTypeKindStore}'
                    }
                },
                {
                    xtype: 'etnastorecolumn',
                    width: 80,
                    align: 'center',
                    dataIndex: 'currencyCode',
                    text: '#{통화}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{currencyCodeStore}'
                    }
                },
                {
                    xtype: 'etnacurrencycolumn',
                    width: 150,
                    align: 'right',
                    dataIndex: 'amount',
                    text: '#{요청금액}',
                    currencyDataIndex: 'currencyCode'
                },
                {
                    xtype: 'gridcolumn',
                    width: 80,
                    align: 'center',
                    dataIndex: 'receiveTotalCount',
                    text: '#{접수건수}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 80,
                    align: 'center',
                    dataIndex: 'rejectTotalCount',
                    text: '#{반송건수}'
                }
            ],
            listeners: {
                selectionchange: 'onPrListGridSelectionChange'
            },
            plugins: [
                {
                    ptype: 'etnaexport',
                    useRenderer: true,
                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                },
                {
                    ptype: 'etnagridstateful'
                },
                {
                    ptype: 'etnafilter'
                },
                {
                    ptype: 'etnagridcontext'
                },
                {
                    ptype: 'etnafinder'
                },
                {
                    ptype: 'etnagridblock'
                }
            ]
        }
    ],
    listeners: {
        afterrender: 'onWindowAfterRender'
    }

});

/*
 * File: app/view/pr/product/request/PRListViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PublicPro.view.pr.product.request.PRListViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.prproductrequestprlist',

    init: function() {
        var me = this, view = this.getView();

        view.search = Ext.Function.bind(me.search, me);
    },

    search: function() {
        var me = this;
        if(me.validate()){
            var store = me.getViewModel().get('prListStore');
            var parameters = me.getViewModel().get('searchValue');
            me.getView().setLoading(true);
            store.loadPage(1,{
                params: parameters,
                callback: function(){
                    me.getView().setLoading(false);
                }
            });
        }

    },

    resetSearchForm: function() {
        var me = this,
            vm = this.getViewModel();

        var initOperatingUnitId = null;
        var initOperatingUnitStore = vm.get('operatingUnitStore');

        if(initOperatingUnitStore.getRange().length > 0) {
            initOperatingUnitId = initOperatingUnitStore.first().get('id');
        }

        vm.set('searchValue',{
            operatingUnitId: initOperatingUnitId,
            fromCreateDate : Ext.Date.add(new Date(), Ext.Date.MONTH, -1),
            toCreateDate   : Ext.Date.add(new Date())
        });
    },

    removePrList: function() {
        var me = this;

        me.getView().setLoading(true);

        var selectedList = me.lookupReference('prGrid').getSelectionModel().getSelection();
        var list = [];
        Ext.each(selectedList, function(model){
            list.push(model.get('id'));
        });

        me.getViewModel().removePrList(list).then({
            success: function(){
                me.search();
                me.getViewModel().get('disabledDeleteBtn', true);
                Etna.Message.alert('#{삭제 하였습니다.}');
                me.getView().setLoading(false);
            },
            failure: function(error){
                me.getView().setLoading(false);
            }
        });
    },

    validate: function() {
        var me = this;
        var form = me.lookupReference('searchForm');
        if(!form.isValid()){
            Etna.Message.alert('#{NOT_VALID_PERIOD}');
            return false;
        }
        return true;
    },

    validateRemoveList: function() {
        var me = this;
        var selectedList = me.lookupReference('prGrid').getSelectionModel().getSelection();

        for(var index=0; index<selectedList.length; index++){

            if(!selectedList[index].get('rejectAllState')){

                var canRemoveList = ['CreateProgress', 'ApprovalCancel', 'ApprovalReject'];
                var progressState = selectedList[index].get('progressState');
                if(!Ext.Array.contains(canRemoveList, progressState)){

                    Etna.Message.alert('#{임시저장, 결재반려인 경우이거나 품목이 모두 반송된 경우에만 삭제가 가능합니다.}');
                    return false;
                }
            }

        }
        return true;
    },

    onPrGridCellclick: function(record) {
        var me = this, vm = this.getViewModel(), view = this.getView();

        var prId           = record.get('id');
        var rejectAllState = record.get('rejectAllState');

        view.fireEvent('loadPrDetail', prId, rejectAllState);
    },

    onSearchButtonClick: function(button, e, eOpts) {
        var me = this;
        me.search();
    },

    onResetButtonClick: function(button, e, eOpts) {
        var me = this;
        me.resetSearchForm();
    },

    onSearchFormSpecialkey: function(field, e) {
        var me = this;
        if(e.getKey() == e.ENTER){
            me.search();
        }
    },

    onAddButtonClick: function(button, e, eOpts) {
        var me = this,
            vm = this.getViewModel();
        var operatingUnitId = vm.get('searchValue').operatingUnitId;

        if(operatingUnitId === null) {
            Etna.Message.alert('#{운영단위를 선택하세요.}');
        } else {
            me.getView().fireEvent('createPrDetail', operatingUnitId);
        }
    },

    onDeleteButtonClick: function(button, e, eOpts) {
        var me = this;

        if(me.validateRemoveList()){
            Etna.Message.confirm('#{삭제 하시겠습니까?}', function(btn){
            if(btn=='yes'){
                me.removePrList();
            }
        });
    }
    },

    onPrListGridSelectionChange: function(model, selected, eOpts) {
        var me = this;
        if(selected.length > 0){
            me.getViewModel().set('disabledDeleteBtn', false);
        }else{
            me.getViewModel().set('disabledDeleteBtn', true);
        }
    },

    onWindowAfterRender: function(component, eOpts) {
        var me = this;

        me.getView().setLoading(true);

        Etna.onDone(function(){
            me.resetSearchForm();
            me.getView().setLoading(false);
        });
    }

});
/*
 * File: app/view/pr/product/request/PRListViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PublicPro.view.pr.product.request.PRListViewModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.prproductrequestprlist',

    requires: [
        'Ext.data.proxy.Direct',
        'Ext.data.reader.Json',
        'Cmmn.store.OperatingUnit',
        'Ext.data.field.String',
        'Cmmn.store.Enum',
        'Cmmn.store.Code',
        'PublicPro.model.pr.PRList'
    ],

    data: {
        searchValue: {
            
        },
        disabledDeleteBtn: true
    },

    stores: {
        prListStore: {
            model: 'PublicPro.model.pr.PRList',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.pr.ProductPrController.findList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        progressStateStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.PrProgressStateKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        itemTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ItemTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        InOutTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.InOutTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        currencyCodeStore: {
            groupCode: 'Currency',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    mapping: 'id',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        }
    },

    removePrList: function(deleteList) {
        var deferred = Ext.create('Deft.Deferred');
        smartsuit.ui.etnajs.pro.pr.PrController.removePrs(deleteList, function(result, e){
            if(e.status){
                deferred.resolve(result);
            }else{
                deferred.reject(e);
            }
        });
        return deferred.promise;
    }

});