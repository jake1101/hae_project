<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="serviceManageApi">
	<select id="regSafetyServiceGroupList" parameterType="map" resultType="map">
		/* serviceManageApi.regSafetyServiceGroupList: 서비스 그룹 리스트 조회 */	
		SELECT	SVC_GRP_ID
				,SVC_GRP_NM  
		FROM CORNERS.SVC_GRP
    </select>
    
	<select id="findRegSafetyServiceList" parameterType="map" resultType="map">
		/* serviceManageApi.findRegSafetyServiceList: 등록 서비스 리스트 조회 */
		select
			(ROW_NUMBER() OVER(order by svc_ctl_nm)) AS ROWNUM,
			tb2.svc_grp_id,
			tb2.svc_grp_nm,
			tb1.svc_ctl_id,
			tb1.svc_ctl_nm,
			tb1.svc_use_yn
		from corners.svc_ctl tb1
			join corners.svc_grp tb2 on tb1.svc_grp_id = tb2.svc_grp_id
		<where>
			1=1
			<if test="p.svc_grp_id != null and p.svc_grp_id != ''">
				and tb2.svc_grp_id = #{p.svc_grp_id}
			</if>
	
			<if test="p.search != null">
				<!-- bind name="svcCtlNmPattern" value="'%' + p.svc_ctl_nm + '%'" /-->
				and tb1.svc_ctl_nm like '%' || #{p.search} || '%' or tb2.svc_grp_nm like '%' || #{p.search} || '%'
			</if>
		</where>
    </select>
    
    <select id="getDevicesByCatalogId" resultType="map">
		select a.dvc_id, a.mdt_yn, b.product_name as dvc_nm
		from corners.svc_ctl_dvc a
			join v4.product b on a.dvc_id = b.product_id
		<where>
			and a.svc_ctl_id = #{p.svc_ctl_id}
			
			<if test="p.mdt_yn != null">
				and a.mdt_yn = #{p.mdt_yn}
			</if>
		</where>
    </select>

	<select id="getWPCList" resultType="map">
		select id, name
		from v4.site
		<if test='p.user_company_id != null'>
			where company_id = #{p.user_company_id}
		</if>
	</select>
    
    <!-- 사용여부(SVC_CTL.SVC_USE_YN)을 수정한다. -->
	<update id="updateServiceUseYn">
		/* updateServiceUseYn */
		UPDATE CORNERS.SVC_CTL 
		SET SVC_USE_YN = #{p.svc_use_yn}
		WHERE SVC_CTL_ID = #{p.svc_ctl_id}
	</update>
	
	<insert id="applyService_backup">
	
	    <selectKey resultType="int" keyProperty="next_svc_id" order="BEFORE">
			select nextval('corners.svc_req_svc_id_seq')        
    	</selectKey>
	
		insert into corners.svc_req
		(
			svc_id, wpc_cd, svc_ctl_id, sst_trm, dsr_str_dt, exp_end_dt, 
			exp_mon_fee, bsk_itm_yn, stt_cd, req_usr_id, req_dt
		) values (
			#{next_svc_id}, #{p.wpc_cd}, #{p.svc_ctl_id}, #{p.sst_trm}, #{p.dsr_str_dt}, #{p.exp_end_dt},
			#{p.exp_mon_fee}, #{p.bsk_itm_yn}, '0', #{p.usr_id}, now()
		);
	
		insert into corners.svc_dvc
		(
			svc_id, dvc_id, qtt
		) 
		values 
		<foreach collection="p.dvc_list" item="item" close=";" separator=",">
			( #{next_svc_id}, #{item.dvc_id}, #{item.qtt} )
		</foreach>
	</insert>
   
   	<insert id="insertSVCREQ">
		insert into corners.svc_req
		(
			 svc_id, wpc_cd, svc_ctl_id, sst_trm, dsr_str_dt, exp_end_dt, 
			exp_mon_fee, bsk_itm_yn, stt_cd, req_usr_id, req_dt
		) values (
			 #{p.svc_id}, #{p.wpc_cd}, #{p.svc_ctl_id}, #{p.sst_trm}, #{p.dsr_str_dt}, #{p.exp_end_dt},
			#{p.exp_mon_fee}, #{p.bsk_itm_yn}, '0', #{p.usr_id}, now() 
		);
	</insert>
   
    <insert id="insertSVCDVC">
		insert into corners.svc_dvc
		(
			svc_id, dvc_id, qtt
		) 
		values 
		<foreach collection="p.dvc_list" item="item" separator=",">
			( #{p.svc_id}, #{item.dvc_id}, #{item.qtt} )
		</foreach>
		;
	</insert>
   
   	<select id="getNextSVCId" resultType="int">
		select nextval('corners.svc_req_svc_id_seq')  
	</select>
   
	<select id="getExistingServiceCnt" resultType="int">
		select count(1) cnt
		from corners.svc_req
		where svc_ctl_id = #{p.svc_ctl_id}
		and wpc_cd = #{p.wpc_cd}
		and stt_cd = '0'
	</select>

	<select id="getDeviceMonthlyFee" resultType="map">
		select *
		from corners.dvc_fee
		where sst_trm = #{p.sst_trm}
		and dvc_id IN
		<foreach collection="p.dvc_list" item="item" separator="," open="(" close=")">
			#{item.dvc_id}
		</foreach>
	</select>
    
    <select id="findListUserByLevel" resultType="map">
    /* user.findListUserByLevel: 내부 사용자 목록 조회 */	
           -- 운영사 관리자
           SELECT DISTINCT A.COMPANY_ID
                 , A.SITE_ID
                 , A.USR_ID                         /* 사용자아이디 */
                 , A.USR_NM                         /* 사용자명 */
                 , A.USE_YN                         /* 사용여부 */
                 , A.DEPT_CD                        /* 부서코드 */
                 , A.POS_CD                         /* 직위코드 */
                 , A.JOB_CD
                 , A.EMAIL
                 , A.PHONE_NO
                 , A.MOBILE_NO
                 , B.NAME 			AS COMP_NM
           FROM (
			<if test='p.access_level == "company"'>
                  -- 운영사 관리자의 운영사로 계정 조회
                  SELECT *
                    FROM ESAUSER
                   WHERE COMPANY_ID = #{p.user_company_id}
               UNION ALL
            </if>
                  -- 로그인한 계정의 현장권한을 포함한 계정 조회
                  SELECT *
                    FROM ESAUSER
                   WHERE SITE_IDS <![CDATA[&&]]> ( SELECT SITE_IDS
                                         FROM ESAUSER
                                        WHERE USR_ID = #{g.username} ) -- Compare two arrays for containment.
                ) A
       LEFT JOIN COMPANY B
              ON A.COMPANY_ID = B.ID
           WHERE A.SYS_ID = #{g.tenant}
             AND A.STS != 'D'
             AND A.USR_CLS = 'B'
		<if test="p.company_id != null">
			<choose>
				<when test='p.company_id == 0'>
				AND A.COMPANY_ID IS NULL
				</when>
				<otherwise>
				AND A.COMPANY_ID = #{p.company_id}
				</otherwise>
			</choose>
		</if>
		<choose>
			<when test='p.access_level == "company"'>
			 AND A.ACCESS_LEVEL != 'system' -- 운영사 관리자(플랫폼관리자 제외)
			</when>
			<otherwise>
			 AND A.ACCESS_LEVEL NOT IN ('system', 'company') -- 현장 관리자(플랫폼,운영사관리자 제외)
			</otherwise>
		</choose>
		<if test="p.usr_nm != null and p.usr_nm != ''">
			<bind name="usernamePattern" value="'%' + p.usr_nm + '%'" />
			 AND UPPER(A.USR_NM) LIKE UPPER(#{usernamePattern})
		</if>
		<if test="p.usr_id != null and p.usr_id != ''">
			<bind name="userIdPattern" value="'%' + p.usr_id + '%'" />
			 AND UPPER(A.USR_ID) LIKE UPPER(#{userIdPattern})
		</if>
		<if test="p.includeNotUse == null or p.includeNotUse == false">
		     AND A.USE_YN = 'Y'
		</if>    
        ORDER BY COMP_NM
                ,USR_NM
    </select>

</mapper>